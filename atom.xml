<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-08T09:36:42.396Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++的各种加锁</title>
    <link href="http://yoursite.com/2019/09/08/C++%E7%9A%84%E5%90%84%E7%A7%8D%E5%8A%A0%E9%94%81/"/>
    <id>http://yoursite.com/2019/09/08/C++的各种加锁/</id>
    <published>2019-09-08T09:35:34.000Z</published>
    <updated>2019-09-08T09:36:42.396Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> total = <span class="number">0</span>;</span><br><span class="line">atomic&lt;<span class="keyword">long</span>&gt; total_atomic = <span class="number">0</span>;</span><br><span class="line">mutex m;<span class="comment">// 声明互斥锁m</span></span><br><span class="line"><span class="built_in">std</span>::mutex g_i_mutex;</span><br><span class="line"></span><br><span class="line"><span class="comment">// flag处于clear状态，没有被设置过atomic_flag初始化后只有三个操作：test_and_set,clear,析构，均是原子化操作。</span></span><br><span class="line"><span class="comment">// atomic_flag::test_and_set检查flag是否被设置，若被设置直接返回true，若没有设置则设置flag为true后再返回false.</span></span><br><span class="line"><span class="comment">// atomic_clear()清楚flag标志即flag=false。</span></span><br><span class="line"><span class="built_in">std</span>::atomic_flag lock_stream = ATOMIC_FLAG_INIT;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand_x</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">return</span> rand() % x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">click</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// int sleep = rand_x(7);</span></span><br><span class="line"><span class="comment">// std::this_thread::sleep_for(chrono::seconds(sleep));</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line">total += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::thread::id tid = <span class="built_in">std</span>::this_thread::get_id();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"total:"</span> &lt;&lt; total &lt;&lt; <span class="string">",tid:"</span> &lt;&lt;tid &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">click_unique_lock</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; my_lock(m, <span class="built_in">std</span>::defer_lock);</span><br><span class="line"></span><br><span class="line">my_lock.lock();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line">total += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::thread::id tid = <span class="built_in">std</span>::this_thread::get_id();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"total:"</span> &lt;&lt; total &lt;&lt; <span class="string">",tid:"</span> &lt;&lt; tid &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// my_lock.unlock(); // 可要可不要，析构的时候也会自动执行</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">click_unique_lock_try</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; my_lock(m, <span class="built_in">std</span>::defer_lock);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (my_lock.try_lock()) &#123; <span class="comment">// 尝试锁定互斥。立即返回。成功获得锁时返回 true ，否则返回 false</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line">total += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::thread::id tid = <span class="built_in">std</span>::this_thread::get_id();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"total:"</span> &lt;&lt; total &lt;&lt; <span class="string">",tid:"</span> &lt;&lt; tid &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">my_lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">click_lock_guard</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// g_i_mutex 在锁离开作用域时自动释放</span></span><br><span class="line"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; lock(g_i_mutex);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line">total += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::thread::id tid = <span class="built_in">std</span>::this_thread::get_id();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"total_atomic_flag:"</span> &lt;&lt; total &lt;&lt; <span class="string">",tid:"</span> &lt;&lt; tid &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">click_atomic_flag</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 检查并设置是个原子操作，如以前没有设置过则退出循环，</span></span><br><span class="line"><span class="comment">// 每个线程都等待前面一个线程将lock_stream状态清楚后跳出循环</span></span><br><span class="line"><span class="comment">// 可以看到这显然是一个自旋锁</span></span><br><span class="line"><span class="keyword">while</span> (lock_stream.test_and_set()) &#123;&#125;                              </span><br><span class="line"><span class="keyword">int</span> i = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line">total += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::thread::id tid = <span class="built_in">std</span>::this_thread::get_id();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"total_atomic_flag:"</span> &lt;&lt; total &lt;&lt; <span class="string">",tid:"</span> &lt;&lt; tid &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">lock_stream.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">click_atomic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//int sleep = rand_x(7);</span></span><br><span class="line"><span class="comment">//std::this_thread::sleep_for(chrono::seconds(sleep)); </span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line">total_atomic += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::thread::id tid = <span class="built_in">std</span>::this_thread::get_id();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"total_atomic:"</span> &lt;&lt; total_atomic &lt;&lt; <span class="string">",tid:"</span> &lt;&lt; tid &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">click_mutex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// int sleep = rand_x(7);</span></span><br><span class="line"><span class="comment">// std::this_thread::sleep_for(chrono::seconds(sleep));</span></span><br><span class="line">m.lock();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line">total += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::thread::id tid = <span class="built_in">std</span>::this_thread::get_id();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"total:"</span> &lt;&lt; total &lt;&lt; <span class="string">",tid:"</span> &lt;&lt; tid &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*cout &lt;&lt; "子线程和主线程分离,变成守护进程" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">thread t(click);</span></span><br><span class="line"><span class="comment">t.detach();// 分离的线程会在后台运行，其所有权(ownership)和控制权将会交给c++运行库，C++运行库保证，当线程退出时，其相关资源的能够正确的回收</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*cout &lt;&lt; "主线程等待子线程退出才退出" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">vector&lt;thread&gt; vth;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">thread t(click);</span></span><br><span class="line"><span class="comment">vth.push_back(std::move(t));// 只能move,不能够复制,或者直接如下vth.push_back(thread(click));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">vth[i].join();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*cout &lt;&lt; "使用原子操作" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">vector&lt;thread&gt; vth;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">thread t(click_atomic);</span></span><br><span class="line"><span class="comment">vth.push_back(std::move(t));// 只能move,不能够复制,或者直接如下vth.push_back(thread(click));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">vth[i].join();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">cout &lt;&lt; "last:" &lt;&lt; total_atomic &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*cout &lt;&lt; "使用互斥锁" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">vector&lt;thread&gt; vth;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">thread t(click_mutex);</span></span><br><span class="line"><span class="comment">vth.push_back(std::move(t));// 只能move,不能够复制,或者直接如下vth.push_back(thread(click));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">vth[i].join();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">cout &lt;&lt; "last:" &lt;&lt; total &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*vector&lt;thread&gt; vth;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">thread t(click_atomic_flag);</span></span><br><span class="line"><span class="comment">vth.push_back(std::move(t));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">vth[i].join();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">cout &lt;&lt; "last:" &lt;&lt; total &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*vector&lt;thread&gt; vth;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">thread t(click_lock_guard);</span></span><br><span class="line"><span class="comment">vth.push_back(std::move(t));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">vth[i].join();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; "last:" &lt;&lt; total &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*vector&lt;thread&gt; vth;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">thread t(click_unique_lock);</span></span><br><span class="line"><span class="comment">vth.push_back(std::move(t));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 20; i++) &#123;</span></span><br><span class="line"><span class="comment">vth[i].join();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; "last:" &lt;&lt; total &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;thread&gt; vth;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line"><span class="function">thread <span class="title">t</span><span class="params">(click_unique_lock_try)</span></span>;</span><br><span class="line">vth.push_back(<span class="built_in">std</span>::move(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">vth[i].join();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"last:"</span> &lt;&lt; total &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="c++开发" scheme="http://yoursite.com/categories/c-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>RAII与锁与线程</title>
    <link href="http://yoursite.com/2019/09/08/RAII%E4%B8%8E%E9%94%81%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/09/08/RAII与锁与线程/</id>
    <published>2019-09-08T09:33:38.000Z</published>
    <updated>2019-09-08T09:35:00.425Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">RAII（Resource Acquisition Is Initialization）是由c++之父Bjarne Stroustrup提出的，中文翻译为资源获取即初始化，</span></span><br><span class="line"><span class="comment">他说：使用局部对象来管理资源的技术称为资源获取即初始化；这里的资源主要是指操作系统中有限的东西如内存、网络套接字等等，</span></span><br><span class="line"><span class="comment">局部对象是指存储在栈的对象，它的生命周期是由操作系统来管理的，无需人工介入；</span></span><br><span class="line"><span class="comment">利用了C++语言局部对象自动销毁的特性来控制资源的生命周期。</span></span><br><span class="line"><span class="comment">RAII的四个步骤：</span></span><br><span class="line"><span class="comment">1.设计一个类封装资源</span></span><br><span class="line"><span class="comment">2.在构造函数中初始化</span></span><br><span class="line"><span class="comment">3.在析构函数中执行销毁</span></span><br><span class="line"><span class="comment">4.在使用时声明一个该类的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> LockType&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScopeLock</span></span></span><br><span class="line"><span class="class">&#123;</span><span class="comment">// 类似lock_guard的锁</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">explicit ScopeLock(LockType &amp;lock):m_lock(lock) //禁止隐式类型转换,引用的初始化必须在成员初始化列表内完成</span><br><span class="line">&#123;</span><br><span class="line">m_lock.lock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~ScopeLock()</span><br><span class="line">&#123;</span><br><span class="line">m_lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">LockType&amp; m_lock;</span><br><span class="line">ScopeLock(<span class="keyword">const</span> ScopeLock&amp; lock) = <span class="keyword">delete</span>;</span><br><span class="line">ScopeLock&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> ScopeLock&amp; lock) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">mutex m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getLock</span><span class="params">(<span class="keyword">int</span> &amp;total)</span> </span>&#123;</span><br><span class="line">ScopeLock&lt;mutex&gt; slock(m);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line">total++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::thread::id tid = <span class="built_in">std</span>::this_thread::get_id();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"total_lock:"</span> &lt;&lt; total &lt;&lt; <span class="string">",tid:"</span> &lt;&lt; tid &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;thread&gt; vth;</span><br><span class="line">Test t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">thread t(&amp;Test::getLock,&amp;t, std::ref(total)); // 传入的参数是引用</span><br><span class="line">vth.push_back(<span class="built_in">std</span>::move(t));<span class="comment">// 只能move,不能够复制,或者直接如下vth.push_back(thread(&amp;Test::getLock,&amp;t, std::ref(total));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">vth[i].join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="c++开发" scheme="http://yoursite.com/categories/c-%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow arg_scope测试其所在范围</title>
    <link href="http://yoursite.com/2019/09/08/tensorflow-arg-scope%E6%B5%8B%E8%AF%95%E5%85%B6%E6%89%80%E5%9C%A8%E8%8C%83%E5%9B%B4/"/>
    <id>http://yoursite.com/2019/09/08/tensorflow-arg-scope测试其所在范围/</id>
    <published>2019-09-08T09:20:44.000Z</published>
    <updated>2019-09-08T09:26:33.153Z</updated>
    
    <content type="html"><![CDATA[<p>首先是完善的不报错的代码及输出：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.contrib.framework <span class="keyword">import</span> arg_scope,add_arg_scope</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hh</span><span class="params">(name = <span class="string">'ss'</span>)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@add_arg_scope</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_ee</span><span class="params">(name,add_args)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    print(add_args)</span><br><span class="line"></span><br><span class="line">add_arg_scope(print_hh)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> arg_scope([print_hh],name=<span class="string">'xx'</span>):</span><br><span class="line">    print_hh()</span><br><span class="line">    print_hh(<span class="string">'yy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> arg_scope([print_ee],add_args=<span class="string">'pp'</span>):</span><br><span class="line">    <span class="keyword">with</span> arg_scope([print_ee], add_args=<span class="string">'mm'</span>):</span><br><span class="line">        print_ee(<span class="string">'test1'</span>)</span><br><span class="line">    print_ee(<span class="string">'test2'</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">ss</span><br><span class="line">yy</span><br><span class="line">test1</span><br><span class="line">mm</span><br><span class="line">test2</span><br><span class="line">pp</span><br></pre></td></tr></table></figure></p><p>从中可以看到arg_scope的作用范围，也可以看出其与函数参数默认值之间的优先权，但是问题就在于@add_arg_scope与add_arg_scope()函数的作用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@add_arg_scope</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_ee</span><span class="params">(name,add_args,add_p = <span class="string">'learn'</span>)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    print(add_args)</span><br><span class="line">    print(add_p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> arg_scope([print_ee],add_args=<span class="string">'pp'</span>):</span><br><span class="line">    <span class="keyword">with</span> arg_scope([print_ee], add_args=<span class="string">'mm'</span>):</span><br><span class="line">        print_ee(<span class="string">'test1'</span>)</span><br><span class="line">    print_ee(<span class="string">'test2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> arg_scope([print_ee],add_args=<span class="string">'pp'</span>,add_p=<span class="string">'cc'</span>):</span><br><span class="line">    print_ee(<span class="string">'test3'</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">test1</span><br><span class="line">mm</span><br><span class="line">learn</span><br><span class="line">test2</span><br><span class="line">pp</span><br><span class="line">learn</span><br><span class="line">test3</span><br><span class="line">pp</span><br><span class="line">cc</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hh</span><span class="params">(name = <span class="string">'ss'</span>)</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">add_arg_scope(print_hh)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> arg_scope([print_hh],name=<span class="string">'xx'</span>):</span><br><span class="line">    print_hh()</span><br><span class="line">    print_hh(<span class="string">'yy'</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">ss</span><br><span class="line">yy</span><br></pre></td></tr></table></figure><p>可以看出add_arg_scope()与@add_arg_scope在优先权上是存在区别的，在add_arg_scope()中，在arg_scope()定义的参数优先权是不如函数的参数设置的默认值的.而在@add_arg_scope中，arg_scope()定义的参数优先权是大于函数参数的默认值的．<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@add_arg_scope</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_ee</span><span class="params">(para,name=<span class="string">'cc'</span>)</span>:</span></span><br><span class="line">    print(para)</span><br><span class="line">    print(name)</span><br><span class="line"><span class="keyword">with</span> arg_scope([print_ee],para=<span class="string">'dd'</span>):</span><br><span class="line">    print_ee()</span><br><span class="line">    print(<span class="string">'oo'</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">dd</span><br><span class="line">cc</span><br><span class="line">oo</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hh</span><span class="params">(para,name = <span class="string">'ss'</span>)</span>:</span></span><br><span class="line">    print(para)</span><br><span class="line">    print(name)</span><br><span class="line">add_arg_scope(print_hh)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> arg_scope([print_hh],para=<span class="string">'xx'</span>):</span><br><span class="line">    print_hh()</span><br><span class="line">    print_hh(<span class="string">'yy'</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/home/saber/桌面/testForPRN/test_arg_scope.py"</span>, line <span class="number">46</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print_hh()</span><br><span class="line">TypeError: print_hh() takes at least <span class="number">1</span> argument (<span class="number">0</span> given)</span><br></pre></td></tr></table></figure><p>可以看到add_arg_scope()与@add_arg_scope，前者并没有真正把参数传过去，而后者则是可以的，这让我怀疑add_arg_scope()函数是否有发挥作用，但是当我删除该函数时，在with arg_scope()函数内使用print_hh()函数却是会报错，这说明它的确发挥这自己的作用．<br>并且</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@add_arg_scope</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_ee</span><span class="params">(add_p = <span class="string">'learn'</span>)</span>:</span></span><br><span class="line">    print(add_p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> arg_scope([print_ee],add_p=<span class="string">'pp'</span>):</span><br><span class="line">    print_ee()</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">pp</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@add_arg_scope</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_ee</span><span class="params">(add_p)</span>:</span></span><br><span class="line">    print(add_p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> arg_scope([print_ee],add_p=<span class="string">'pp'</span>):</span><br><span class="line">    print_ee(<span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/home/saber/桌面/testForPRN/test_arg_scope.py"</span>, line <span class="number">55</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    print_ee(<span class="string">'s'</span>)</span><br><span class="line">  File <span class="string">"/usr/local/lib/python2.7/dist-packages/tensorflow/contrib/framework/python/ops/arg_scope.py"</span>, line <span class="number">182</span>, <span class="keyword">in</span> func_with_args</span><br><span class="line">    <span class="keyword">return</span> func(*args, **current_args)</span><br><span class="line">TypeError: print_ee() got multiple values <span class="keyword">for</span> keyword argument <span class="string">'add_p'</span></span><br></pre></td></tr></table></figure><p>可以看到@add_arg_scope传入的值引起了冲突,而add_arg_scope()就不存在这个问题<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_hh</span><span class="params">(add_p)</span>:</span></span><br><span class="line">    print(add_p)</span><br><span class="line">add_arg_scope(print_hh)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> arg_scope([print_hh],add_p=<span class="string">'pp'</span>):</span><br><span class="line">    print_hh(<span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">d</span><br></pre></td></tr></table></figure></p><p>最后,只在代码中看到了这个，表示我的头还是很大<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_arg_scope</span><span class="params">(func)</span>:</span></span><br><span class="line">  <span class="string">"""Decorates a function with args so it can be used within an arg_scope.</span></span><br><span class="line"><span class="string">  Args:</span></span><br><span class="line"><span class="string">    func: function to decorate.</span></span><br><span class="line"><span class="string">  Returns:</span></span><br><span class="line"><span class="string">    A tuple with the decorated function func_with_args().</span></span><br><span class="line"><span class="string">  """</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arg_scope</span><span class="params">(list_ops_or_scope, **kwargs)</span>:</span></span><br><span class="line">  <span class="string">"""Stores the default arguments for the given set of list_ops.</span></span><br><span class="line"><span class="string">  For usage, please see examples at top of the file.</span></span><br><span class="line"><span class="string">  Args:</span></span><br><span class="line"><span class="string">    list_ops_or_scope: List or tuple of operations to set argument scope for or</span></span><br><span class="line"><span class="string">      a dictionary containing the current scope. When list_ops_or_scope is a</span></span><br><span class="line"><span class="string">      dict, kwargs must be empty. When list_ops_or_scope is a list or tuple,</span></span><br><span class="line"><span class="string">      then every op in it need to be decorated with @add_arg_scope to work.</span></span><br><span class="line"><span class="string">    **kwargs: keyword=value that will define the defaults for each op in</span></span><br><span class="line"><span class="string">              list_ops. All the ops need to accept the given set of arguments.</span></span><br><span class="line"><span class="string">．．．</span></span><br><span class="line"><span class="string">  Example of how to use tf.contrib.framework.add_arg_scope to enable your</span></span><br><span class="line"><span class="string">  function to be called within an arg_scope later:</span></span><br><span class="line"><span class="string">  @tf.contrib.framework.add_arg_scope</span></span><br><span class="line"><span class="string">  def conv2d(*args, **kwargs)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先是完善的不报错的代码及输出：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="机器学习" scheme="http://yoursite.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>ICP</title>
    <link href="http://yoursite.com/2019/09/08/ICP/"/>
    <id>http://yoursite.com/2019/09/08/ICP/</id>
    <published>2019-09-08T08:58:32.000Z</published>
    <updated>2019-09-08T09:32:00.526Z</updated>
    
    <content type="html"><![CDATA[<p>ICP 基本上有两种解法</p><h2 id="四元法"><a href="#四元法" class="headerlink" title="四元法"></a>四元法</h2><p><img src="/img/siyuanfa.png" alt="siyuanfa"><br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ret</span> = <span class="title">normal_gravity</span><span class="params">( data )</span></span></span><br><span class="line"><span class="comment">% 数据在重心上正则化</span></span><br><span class="line"></span><br><span class="line">    [m, n] = <span class="built_in">size</span>(data);</span><br><span class="line">    data_mean = mean(data);<span class="comment">%坐标在x,y,z上的平均值</span></span><br><span class="line">    ret = data - <span class="built_in">ones</span>(m, <span class="number">1</span>) * data_mean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[data_g,  data_p]</span> = <span class="title">icp_process_xgtu</span><span class="params">(data_g,  data_p)</span></span></span><br><span class="line"></span><br><span class="line">[ data_g, data_p, error, data_pp, R ] = icp_process(data_g, data_p);</span><br><span class="line">log_info(strcat(<span class="string">'点云之间当前差值：'</span>, num2str(error)));</span><br><span class="line">log_info(<span class="string">'当前变换矩阵：'</span>);</span><br><span class="line"><span class="built_in">disp</span>(R);</span><br><span class="line"></span><br><span class="line">cnt = <span class="number">1</span>;</span><br><span class="line">last_error = <span class="number">0</span>;</span><br><span class="line">last_R = R;</span><br><span class="line"><span class="comment">% 进行迭代处理点云</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">abs</span>(error - last_error) &gt; <span class="number">0.01</span></span><br><span class="line">    cnt = cnt + <span class="number">1</span>;</span><br><span class="line">    last_error = error;</span><br><span class="line">    last_R = R;</span><br><span class="line">    [data_g, data_p, error, data_pp, R] = icp_process(data_g, data_p);</span><br><span class="line">    R = last_R * R;</span><br><span class="line">    log_info(strcat(<span class="string">'当前循环次数'</span>, num2str(cnt), <span class="string">'点云之间的差值'</span>, num2str(error)));</span><br><span class="line">    log_info(<span class="string">'当前变换矩阵：'</span>);</span><br><span class="line">    <span class="built_in">disp</span>(R);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％％</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[ data_g, data_p, err, data_pp, R ]</span> = <span class="title">icp_process</span><span class="params">( data_g, data_p )</span></span></span><br><span class="line"></span><br><span class="line">    [k1, n] = <span class="built_in">size</span>(data_g);</span><br><span class="line">    [k2, m] = <span class="built_in">size</span>(data_p);</span><br><span class="line"></span><br><span class="line">    data_p1 = <span class="built_in">zeros</span>(k2, <span class="number">3</span>);     <span class="comment">% 用来存储两个点集之间的临时误差</span></span><br><span class="line">    data_pp = <span class="built_in">zeros</span>(k1, <span class="number">3</span>);     <span class="comment">% 用来存储data_g在data_p中对应的最小点</span></span><br><span class="line">    distance = <span class="built_in">zeros</span>(k1, <span class="number">1</span>);    <span class="comment">% data_g(i)与data_p中的距离</span></span><br><span class="line">    error = <span class="built_in">zeros</span>(k1, <span class="number">1</span>);       <span class="comment">% 用来存储data_g的临时最小误差</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% 坐标数据重心正则化</span></span><br><span class="line">    data_g = normal_gravity(data_g);</span><br><span class="line">    data_p = normal_gravity(data_p);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% 求对应的最近点</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">1</span>:k1</span><br><span class="line">        data_p1(:, <span class="number">1</span>) = data_p(:, <span class="number">1</span>) - data_g(<span class="built_in">i</span>, <span class="number">1</span>);    <span class="comment">% data_p所有点的x坐标都减去data_g中一个点的ｘ轴坐标</span></span><br><span class="line">        data_p1(:, <span class="number">2</span>) = data_p(:, <span class="number">2</span>) - data_g(<span class="built_in">i</span>, <span class="number">2</span>);    <span class="comment">% data_p所有点的y坐标都减去data_g中一个点的y轴坐标</span></span><br><span class="line">        data_p1(:, <span class="number">3</span>) = data_p(:, <span class="number">3</span>) - data_g(<span class="built_in">i</span>, <span class="number">3</span>);    <span class="comment">% data_p所有点的z坐标都减去data_g中一个点的z轴坐标</span></span><br><span class="line">        distance = data_p1(:, <span class="number">1</span>).^<span class="number">2</span> + data_p1(:, <span class="number">2</span>).^<span class="number">2</span> + data_p1(:, <span class="number">3</span>).^<span class="number">2</span>;  <span class="comment">% data_p与data_g(i)点的距离</span></span><br><span class="line">        [min_dis, min_index] = min(distance);   <span class="comment">% data_p与data_g(i)点的距离最小的点</span></span><br><span class="line">        data_pp(<span class="built_in">i</span>, :) = data_p(min_index, :);   <span class="comment">% data_pp中保存data_g的对应最小点</span></span><br><span class="line">        error(<span class="built_in">i</span>) = min_dis;     <span class="comment">% 存储对应的误差</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% 四元数法求解</span></span><br><span class="line">    V = (data_g' * data_pp) ./ k1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">% 对称矩阵Q用于求解四元</span></span><br><span class="line">    matrix_Q = [V(<span class="number">1</span>,<span class="number">1</span>)+V(<span class="number">2</span>,<span class="number">2</span>)+V(<span class="number">3</span>,<span class="number">3</span>),   V(<span class="number">2</span>,<span class="number">3</span>)-V(<span class="number">3</span>,<span class="number">2</span>),          V(<span class="number">3</span>,<span class="number">1</span>)-V(<span class="number">1</span>,<span class="number">3</span>),          V(<span class="number">1</span>,<span class="number">2</span>)-V(<span class="number">2</span>,<span class="number">1</span>);  </span><br><span class="line">                V(<span class="number">2</span>,<span class="number">3</span>)-V(<span class="number">3</span>,<span class="number">2</span>),          V(<span class="number">1</span>,<span class="number">1</span>)-V(<span class="number">2</span>,<span class="number">2</span>)-V(<span class="number">3</span>,<span class="number">3</span>),   V(<span class="number">1</span>,<span class="number">2</span>)+V(<span class="number">2</span>,<span class="number">1</span>),          V(<span class="number">1</span>,<span class="number">3</span>)+V(<span class="number">3</span>,<span class="number">1</span>);  </span><br><span class="line">                V(<span class="number">3</span>,<span class="number">1</span>)-V(<span class="number">1</span>,<span class="number">3</span>),          V(<span class="number">1</span>,<span class="number">2</span>)+V(<span class="number">2</span>,<span class="number">1</span>),          V(<span class="number">2</span>,<span class="number">2</span>)-V(<span class="number">1</span>,<span class="number">1</span>)-V(<span class="number">3</span>,<span class="number">3</span>),   V(<span class="number">2</span>,<span class="number">3</span>)+V(<span class="number">3</span>,<span class="number">2</span>);  </span><br><span class="line">                V(<span class="number">1</span>,<span class="number">2</span>)-V(<span class="number">2</span>,<span class="number">1</span>),          V(<span class="number">1</span>,<span class="number">3</span>)+V(<span class="number">3</span>,<span class="number">1</span>),          V(<span class="number">2</span>,<span class="number">3</span>)+V(<span class="number">3</span>,<span class="number">2</span>),          V(<span class="number">3</span>,<span class="number">3</span>)-V(<span class="number">1</span>,<span class="number">1</span>)-V(<span class="number">2</span>,<span class="number">2</span>)];</span><br><span class="line"></span><br><span class="line">    [V2, D2] = eig(matrix_Q);       <span class="comment">% 返回特征的对角矩阵D2和矩阵v2</span></span><br><span class="line">    lambdas = [D2(<span class="number">1</span>, <span class="number">1</span>), D2(<span class="number">2</span>, <span class="number">2</span>), D2(<span class="number">3</span>, <span class="number">3</span>), D2(<span class="number">4</span>, <span class="number">4</span>)]; <span class="comment">% 特征值</span></span><br><span class="line">    [lambda, ind] = max(lambdas);   <span class="comment">% 最大的特征值以及索引</span></span><br><span class="line">    Q = V2(:, ind); <span class="comment">% Q所对应的值便是四元</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">%　变换矩阵</span></span><br><span class="line">    R=[Q(<span class="number">1</span>,<span class="number">1</span>)^<span class="number">2</span>+Q(<span class="number">2</span>,<span class="number">1</span>)^<span class="number">2</span>-Q(<span class="number">3</span>,<span class="number">1</span>)^<span class="number">2</span>-Q(<span class="number">4</span>,<span class="number">1</span>)^<span class="number">2</span>,     <span class="number">2</span>*(Q(<span class="number">2</span>,<span class="number">1</span>)*Q(<span class="number">3</span>,<span class="number">1</span>)-Q(<span class="number">1</span>,<span class="number">1</span>)*Q(<span class="number">4</span>,<span class="number">1</span>)),        <span class="number">2</span>*(Q(<span class="number">2</span>,<span class="number">1</span>)*Q(<span class="number">4</span>,<span class="number">1</span>)+Q(<span class="number">1</span>,<span class="number">1</span>)*Q(<span class="number">3</span>,<span class="number">1</span>));  </span><br><span class="line">       <span class="number">2</span>*(Q(<span class="number">2</span>,<span class="number">1</span>)*Q(<span class="number">3</span>,<span class="number">1</span>)+Q(<span class="number">1</span>,<span class="number">1</span>)*Q(<span class="number">4</span>,<span class="number">1</span>)),         Q(<span class="number">1</span>,<span class="number">1</span>)^<span class="number">2</span>-Q(<span class="number">2</span>,<span class="number">1</span>)^<span class="number">2</span>+Q(<span class="number">3</span>,<span class="number">1</span>)^<span class="number">2</span>-Q(<span class="number">4</span>,<span class="number">1</span>)^<span class="number">2</span>,    <span class="number">2</span>*(Q(<span class="number">3</span>,<span class="number">1</span>)*Q(<span class="number">4</span>,<span class="number">1</span>)-Q(<span class="number">1</span>,<span class="number">1</span>)*Q(<span class="number">2</span>,<span class="number">1</span>));  </span><br><span class="line">       <span class="number">2</span>*(Q(<span class="number">2</span>,<span class="number">1</span>)*Q(<span class="number">4</span>,<span class="number">1</span>)-Q(<span class="number">1</span>,<span class="number">1</span>)*Q(<span class="number">3</span>,<span class="number">1</span>)),         <span class="number">2</span>*(Q(<span class="number">3</span>,<span class="number">1</span>)*Q(<span class="number">4</span>,<span class="number">1</span>)+Q(<span class="number">1</span>,<span class="number">1</span>)*Q(<span class="number">2</span>,<span class="number">1</span>)),        Q(<span class="number">1</span>,<span class="number">1</span>)^<span class="number">2</span>-Q(<span class="number">2</span>,<span class="number">1</span>)^<span class="number">2</span>-Q(<span class="number">3</span>,<span class="number">1</span>)^<span class="number">2</span>-Q(<span class="number">4</span>,<span class="number">1</span>)^<span class="number">2</span>;  </span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">% 更新data_p，其实这应该也是对应论文中平移矩阵的过程,至于是否等价我觉得应该是不等价的，在不同情况下效果应该不同</span></span><br><span class="line">    data_p = data_p * R;</span><br><span class="line">    data_pp = data_pp * R;</span><br><span class="line">    data_p = normal_gravity(data_p);</span><br><span class="line">    data_pp = normal_gravity(data_pp);</span><br><span class="line">    err = mean(error);</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 参考文献：A method for registration of 3-D shapes</span></span><br><span class="line"><span class="comment">% 代码来源：[https://github.com/XgTu/2DASL](https://github.com/XgTu/2DASL)，我只是添加了下注释啦</span></span><br></pre></td></tr></table></figure></p><h2 id="SVD"><a href="#SVD" class="headerlink" title="SVD"></a>SVD</h2><p>参考博客１：<a href="https://zhuanlan.zhihu.com/p/35893884" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35893884</a><br>参考博客２：<a href="https://blog.csdn.net/jsgaobiao/article/details/78873718" target="_blank" rel="noopener">https://blog.csdn.net/jsgaobiao/article/details/78873718</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://zhuanlan.zhihu.com/p/35893884</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nearest_point</span><span class="params">(P, Q)</span>:</span></span><br><span class="line">    P = np.array(P)</span><br><span class="line">    Q = np.array(Q)</span><br><span class="line">    dis = np.zeros(P.shape[<span class="number">0</span>])</span><br><span class="line">    index = np.zeros(Q.shape[<span class="number">0</span>], dtype = np.int)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(P.shape[<span class="number">0</span>]):</span><br><span class="line">        minDis = np.inf</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(Q.shape[<span class="number">0</span>]):</span><br><span class="line">            tmp = np.linalg.norm(P[i] - Q[j], ord = <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> minDis &gt; tmp:</span><br><span class="line">                minDis = tmp</span><br><span class="line">                index[i] = j</span><br><span class="line">        dis[i] = minDis</span><br><span class="line">    <span class="keyword">return</span> dis, index</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_optimal_transform</span><span class="params">(P, Q)</span>:</span></span><br><span class="line">    meanP = np.mean(P, axis = <span class="number">0</span>)</span><br><span class="line">    meanQ = np.mean(Q, axis = <span class="number">0</span>)</span><br><span class="line">    P_ = P - meanP</span><br><span class="line">    Q_ = Q - meanQ</span><br><span class="line"></span><br><span class="line">    W = np.dot(Q_.T, P_)</span><br><span class="line">    U, S, VT = np.linalg.svd(W)</span><br><span class="line">    R = np.dot(U, VT)</span><br><span class="line">    <span class="keyword">if</span> np.linalg.det(R) &lt; <span class="number">0</span>:</span><br><span class="line">       R[<span class="number">2</span>, :] *= <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    T = meanQ.T - np.dot(R, meanP.T)</span><br><span class="line">    <span class="keyword">return</span> R, T</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">icp</span><span class="params">(src, dst, maxIteration=<span class="number">50</span>, tolerance=<span class="number">0.001</span>, controlPoints=<span class="number">100</span>)</span>:</span></span><br><span class="line">    A = np.array(src)</span><br><span class="line">    B = np.array(dst)</span><br><span class="line">    lastErr = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> (A.shape[<span class="number">0</span>] != B.shape[<span class="number">0</span>]):</span><br><span class="line">        length = min(A.shape[<span class="number">0</span>], B.shape[<span class="number">0</span>])</span><br><span class="line">        length = min(length, controlPoints)</span><br><span class="line">        sampleA = random.sample(range(A.shape[<span class="number">0</span>]), length)</span><br><span class="line">        sampleB = random.sample(range(B.shape[<span class="number">0</span>]), length)</span><br><span class="line">        P = np.array([A[i] <span class="keyword">for</span> i <span class="keyword">in</span> sampleA])</span><br><span class="line">        Q = np.array([B[i] <span class="keyword">for</span> i <span class="keyword">in</span> sampleB])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        length = A.shape[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> (length &gt; controlPoints):</span><br><span class="line">            sampleA = random.sample(range(A.shape[<span class="number">0</span>]), length)</span><br><span class="line">            sampleB = random.sample(range(B.shape[<span class="number">0</span>]), length)</span><br><span class="line">            P = np.array([A[i] <span class="keyword">for</span> i <span class="keyword">in</span> sampleA])</span><br><span class="line">            Q = np.array([B[i] <span class="keyword">for</span> i <span class="keyword">in</span> sampleB])</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            P = A</span><br><span class="line">            Q = B</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(maxIteration):</span><br><span class="line">        print(<span class="string">"Iteration : "</span> + str(i) + <span class="string">" with Err : "</span> + str(lastErr))</span><br><span class="line">        dis, index = nearest_point(P, Q)</span><br><span class="line">        R, T = find_optimal_transform(P, Q[index,:])</span><br><span class="line">        A = np.dot(R, A.T).T + np.array([T <span class="keyword">for</span> j <span class="keyword">in</span> range(A.shape[<span class="number">0</span>])])</span><br><span class="line">        P = np.dot(R, P.T).T + np.array([T <span class="keyword">for</span> j <span class="keyword">in</span> range(P.shape[<span class="number">0</span>])])</span><br><span class="line"></span><br><span class="line">        meanErr = np.sum(dis) / dis.shape[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> abs(lastErr - meanErr) &lt; tolerance:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        lastErr = meanErr</span><br><span class="line"></span><br><span class="line">        <span class="comment"># visualization</span></span><br><span class="line">        <span class="comment"># ax = plt.subplot(1, 1, 1, projection='3d')</span></span><br><span class="line">        <span class="comment"># ax.scatter(P[:, 0], P[:, 1], P[:, 2], c='r')</span></span><br><span class="line">        <span class="comment"># ax.scatter(Q[:, 0], Q[:, 1], Q[:, 2], c='g')</span></span><br><span class="line">        <span class="comment"># plt.show(block = False)</span></span><br><span class="line"></span><br><span class="line">    R, T = find_optimal_transform(A, np.array(src))</span><br><span class="line">    <span class="keyword">return</span> R, T, A</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ICP 基本上有两种解法&lt;/p&gt;
&lt;h2 id=&quot;四元法&quot;&gt;&lt;a href=&quot;#四元法&quot; class=&quot;headerlink&quot; title=&quot;四元法&quot;&gt;&lt;/a&gt;四元法&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/siyuanfa.png&quot; alt=&quot;siyuanfa&quot;&gt;&lt;b
      
    
    </summary>
    
      <category term="图像处理" scheme="http://yoursite.com/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="matlab" scheme="http://yoursite.com/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>cython调用自己编写的ｃ语言代码</title>
    <link href="http://yoursite.com/2018/11/13/cython%E8%B0%83%E7%94%A8%E8%87%AA%E5%B7%B1%E7%BC%96%E5%86%99%E7%9A%84c%E8%AF%AD%E8%A8%80%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2018/11/13/cython调用自己编写的c语言代码/</id>
    <published>2018-11-13T08:06:26.000Z</published>
    <updated>2018-11-13T08:06:58.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先是从setup-py上看一下整体的结构"><a href="#首先是从setup-py上看一下整体的结构" class="headerlink" title="首先是从setup.py上看一下整体的结构"></a>首先是从setup.py上看一下整体的结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup, Extension</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">from</span> Cython.Distutils <span class="keyword">import</span> build_ext</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line"></span><br><span class="line">    cmdclass=&#123;<span class="string">'build_ext'</span>: build_ext&#125;,</span><br><span class="line"></span><br><span class="line">    ext_modules=[Extension(<span class="string">"cos_doubles"</span>,</span><br><span class="line"></span><br><span class="line">                           sources=[<span class="string">"_cos_doubles.pyx"</span>, <span class="string">"cos_doubles.c"</span>],</span><br><span class="line"></span><br><span class="line">                           include_dirs=[numpy.get_include()])],</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="cos-doubles-h"><a href="#cos-doubles-h" class="headerlink" title="cos_doubles.h"></a>cos_doubles.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _COS_DOUBLES_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _COS_DOUBLES_H</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cos_doubles</span><span class="params">(<span class="keyword">double</span> * in_array, <span class="keyword">double</span> * out_array, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="cos-doubles-c"><a href="#cos-doubles-c" class="headerlink" title="cos_doubles.c"></a>cos_doubles.c</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cos_doubles.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  Compute the cosine of each element in in_array, storing the result in</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *  out_array. */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cos_doubles</span><span class="params">(<span class="keyword">double</span> * in_array, <span class="keyword">double</span> * out_array, <span class="keyword">int</span> size)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line"></span><br><span class="line">        out_array[i] = <span class="built_in">cos</span>(in_array[i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cos-doubles-pyx"><a href="#cos-doubles-pyx" class="headerlink" title="cos_doubles.pyx"></a>cos_doubles.pyx</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span><span class="string">" Example of wrapping a C function that takes C double arrays as input using</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    the Numpy declarations from Cython "</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># import both numpy and the Cython declarations for numpy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy as np</span><br><span class="line"></span><br><span class="line">cimport numpy as np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">if</span> you want to use the Numpy-C-API from Cython</span></span><br><span class="line"></span><br><span class="line"># (<span class="keyword">not</span> strictly necessary <span class="keyword">for</span> <span class="keyword">this</span> example)</span><br><span class="line"></span><br><span class="line">np.import_array()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># cdefine the signature of our c function</span></span><br><span class="line"></span><br><span class="line">cdef <span class="keyword">extern</span> from <span class="string">"cos_doubles.h"</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cos_doubles</span> <span class="params">(<span class="keyword">double</span> * in_array, <span class="keyword">double</span> * out_array, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="meta"># create the wrapper code, with numpy type annotations</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">def <span class="title">cos_doubles_func</span><span class="params">(np.ndarray[<span class="keyword">double</span>, ndim=<span class="number">1</span>, mode=<span class="string">"c"</span>] in_array <span class="keyword">not</span> None,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">                     np.ndarray[<span class="keyword">double</span>, ndim=<span class="number">1</span>, mode=<span class="string">"c"</span>] out_array <span class="keyword">not</span> None,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">int</span> size</span></span></span><br><span class="line">                     ):</span><br><span class="line"></span><br><span class="line">    cos_doubles(&lt;<span class="keyword">double</span>*&gt; np.PyArray_DATA(in_array),</span><br><span class="line"></span><br><span class="line">                &lt;<span class="keyword">double</span>*&gt; np.PyArray_DATA(out_array),</span><br><span class="line"></span><br><span class="line">                size)</span><br></pre></td></tr></table></figure><blockquote><p>进入ｃ代码所在的文件夹，执行python setup.py build_ext -i</p></blockquote><h2 id="调用代码main-py"><a href="#调用代码main-py" class="headerlink" title="调用代码main.py"></a>调用代码main.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cython_m <span class="keyword">as</span> cm</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">a = np.linspace(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">b = np.empty_like(a)</span><br><span class="line"></span><br><span class="line">cm.cos_doubles.cos_doubles_func(a, b,a.shape[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">plt.plot(b)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/leadai/article/details/78849983" target="_blank" rel="noopener">参考１</a><br><a href="https://moonlet.gitbooks.io/cython-document-zh_cn/content/ch3-using_c_libraries.html" target="_blank" rel="noopener">参考２</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;首先是从setup-py上看一下整体的结构&quot;&gt;&lt;a href=&quot;#首先是从setup-py上看一下整体的结构&quot; class=&quot;headerlink&quot; title=&quot;首先是从setup.py上看一下整体的结构&quot;&gt;&lt;/a&gt;首先是从setup.py上看一下整体的结构&lt;/
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python argparse.ArgumentParser()使用小结</title>
    <link href="http://yoursite.com/2018/11/13/python-argparse-ArgumentParser-%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2018/11/13/python-argparse-ArgumentParser-使用小结/</id>
    <published>2018-11-13T08:04:51.000Z</published>
    <updated>2018-11-13T08:05:15.559Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#设置命令行参数,以及帮助文档</span></span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">'test argparse'</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">'-i'</span>, <span class="string">'--inputDir'</span>, default=<span class="string">'TestImages/'</span>, type=str,</span><br><span class="line">                        help=<span class="string">'path to the input directory, where input images are stored.'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'-o'</span>, <span class="string">'--outputDir'</span>, default=<span class="string">'TestImages/results'</span>, type=str,</span><br><span class="line">                        help=<span class="string">'path to the output directory, where results(obj,txt files) will be stored.'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--gpu'</span>, default=<span class="string">'0'</span>, type=str,</span><br><span class="line">                        help=<span class="string">'set gpu id, -1 for CPU'</span>)</span><br><span class="line">    parser.add_argument(<span class="string">'--isDlib'</span>, default=<span class="keyword">True</span>, type=ast.literal_eval,</span><br><span class="line">                        help=<span class="string">'whether to use dlib for detecting face, default is True, if False, the input image should be cropped in advance'</span>)</span><br><span class="line"></span><br><span class="line">    parser.add_argument(<span class="string">'--texture_size'</span>, default=<span class="number">256</span>, type=int,</span><br><span class="line">                        help=<span class="string">'size of texture map, default is 256. need isTexture is True'</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    print(args.inputDir)</span><br><span class="line">    print(type(args.inputDir))</span><br><span class="line"></span><br><span class="line">    print(args.texture_size)</span><br><span class="line">    </span><br><span class="line">    print(args.isDlib)</span><br><span class="line">    print(type(args.isDlib))</span><br><span class="line"></span><br><span class="line">//以下是其对应输出</span><br><span class="line">saber@saber:~/桌面/testForPRN$ python args.py --help</span><br><span class="line">usage: args.py [-h] [-i INPUTDIR] [-o OUTPUTDIR] [--gpu GPU] [--isDlib ISDLIB]</span><br><span class="line">               [--texture_size TEXTURE_SIZE]</span><br><span class="line"></span><br><span class="line">test argparse</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message <span class="keyword">and</span> exit</span><br><span class="line">  -i INPUTDIR, --inputDir INPUTDIR</span><br><span class="line">                        path to the input directory, where input images are</span><br><span class="line">                        stored.</span><br><span class="line">  -o OUTPUTDIR, --outputDir OUTPUTDIR</span><br><span class="line">                        path to the output directory, where results(obj,txt</span><br><span class="line">                        files) will be stored.</span><br><span class="line">  --gpu GPU             set gpu id, <span class="number">-1</span> <span class="keyword">for</span> CPU</span><br><span class="line">  --isDlib ISDLIB       whether to use dlib <span class="keyword">for</span> detecting face, default <span class="keyword">is</span></span><br><span class="line">                        <span class="keyword">True</span>, <span class="keyword">if</span> <span class="keyword">False</span>, the input image should be cropped <span class="keyword">in</span></span><br><span class="line">                        advance</span><br><span class="line">  --texture_size TEXTURE_SIZE</span><br><span class="line">                        size of texture map, default <span class="keyword">is</span> <span class="number">256.</span> need isTexture <span class="keyword">is</span></span><br><span class="line">                        <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">saber@saber:~/桌面/testForPRN$ python args.py --isDlib <span class="string">'(1,2,3)'</span> --inputDir test/</span><br><span class="line">test/</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"><span class="number">256</span></span><br><span class="line">&lt;type <span class="string">'int'</span>&gt;</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&lt;type <span class="string">'tuple'</span>&gt;</span><br><span class="line">saber@saber:~/桌面/testForPRN$ python args.py --isDlib <span class="keyword">True</span> --inputDir test/</span><br><span class="line">test/</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"><span class="number">256</span></span><br><span class="line">&lt;type <span class="string">'int'</span>&gt;</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&lt;type <span class="string">'bool'</span>&gt;</span><br><span class="line">saber@saber:~/桌面/testForPRN$ python args.py --texture_size s</span><br><span class="line">usage: args.py [-h] [-i INPUTDIR] [-o OUTPUTDIR] [--gpu GPU] [--isDlib ISDLIB]</span><br><span class="line">               [--texture_size TEXTURE_SIZE]</span><br><span class="line">args.py: error: argument --texture_size: invalid int value: <span class="string">'s'</span></span><br><span class="line">saber@saber:~/桌面/testForPRN$ python args.py --texture_size <span class="number">255</span></span><br><span class="line">TestImages/</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"><span class="number">255</span></span><br><span class="line">&lt;type <span class="string">'int'</span>&gt;</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&lt;type <span class="string">'bool'</span>&gt;</span><br><span class="line">saber@saber:~/桌面/testForPRN$ python args.py --isDlib <span class="number">1</span> --inputDir test/</span><br><span class="line">test/</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"><span class="number">256</span></span><br><span class="line">&lt;type <span class="string">'int'</span>&gt;</span><br><span class="line"><span class="number">1</span></span><br><span class="line">&lt;type <span class="string">'int'</span>&gt;</span><br><span class="line">//可以看出其上的type在其中的作用，以及使用ast.literal_eval类型在这种情况下的作用</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>skimage.transform.estimate_transform(),skimage.transform.warp(),tform的使用</title>
    <link href="http://yoursite.com/2018/11/13/skimage-transform-estimate-transform-skimage-transform-warp-tform%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/11/13/skimage-transform-estimate-transform-skimage-transform-warp-tform的使用/</id>
    <published>2018-11-13T08:03:30.000Z</published>
    <updated>2018-11-13T08:04:13.922Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>)</span><br><span class="line"><span class="comment"># 项目上的例子</span></span><br><span class="line"><span class="comment"># import numpy as np</span></span><br><span class="line"><span class="comment"># import scipy.io as sio</span></span><br><span class="line"><span class="comment"># from skimage import io</span></span><br><span class="line"><span class="comment"># import skimage.transform</span></span><br><span class="line"><span class="comment"># import matplotlib.pyplot as plt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># image = io.imread('Data/AFW_134212_1.jpg')</span></span><br><span class="line"><span class="comment"># src_pts = np.array([[100, 100], [100, 200], [200, 100]])#图像上框选的人脸所在的位置</span></span><br><span class="line"><span class="comment"># DST_PTS = np.array([[0, 0], [0, 99], [99, 0]])#裁剪出的新图像大小</span></span><br><span class="line"><span class="comment"># tform = skimage.transform.estimate_transform('similarity', src_pts, DST_PTS)#变换,得到对应的变换矩阵</span></span><br><span class="line"><span class="comment"># cropped_image = skimage.transform.warp(image, tform.inverse, output_shape=(100, 100))#将该变换应用到图像上去</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(tform.params)</span></span><br><span class="line"><span class="comment"># position = image_vertices.copy()#人脸上的特征点</span></span><br><span class="line"><span class="comment"># position[:, 2] = 1#加上ｚ轴</span></span><br><span class="line"><span class="comment"># position = np.dot(position, tform.params.T)#将相同的变换应用到人脸特征点上</span></span><br><span class="line"><span class="comment"># plt.imshow(cropped_image)</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#官网上的例子</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> data</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> transform <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">text = data.text()</span><br><span class="line"></span><br><span class="line">src = np.array([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">50</span>], [<span class="number">300</span>, <span class="number">50</span>], [<span class="number">300</span>, <span class="number">0</span>]])</span><br><span class="line">dst = np.array([[<span class="number">155</span>, <span class="number">15</span>], [<span class="number">65</span>, <span class="number">40</span>], [<span class="number">260</span>, <span class="number">130</span>], [<span class="number">360</span>, <span class="number">95</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># src = np.array([[155, 15], [65, 40], [260, 130], [360, 95]])#项目上的例子与官网上的例子在src和dst的选取上相反</span></span><br><span class="line"><span class="comment"># dst = np.array([[0, 0], [0, 50], [300, 50], [300, 0]])</span></span><br><span class="line"></span><br><span class="line">tform3 = tf.ProjectiveTransform()</span><br><span class="line">tform3.estimate(src, dst)</span><br><span class="line">warped = tf.warp(text, tform3.params, output_shape=(<span class="number">50</span>, <span class="number">300</span>))</span><br><span class="line"><span class="comment">#warped = tf.warp(text, tform3.inverse, output_shape=(50, 300))</span></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(nrows=<span class="number">2</span>, figsize=(<span class="number">8</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].imshow(text, cmap=plt.cm.gray)</span><br><span class="line">ax[<span class="number">0</span>].plot(dst[:, <span class="number">0</span>], dst[:, <span class="number">1</span>], <span class="string">'.r'</span>)</span><br><span class="line">ax[<span class="number">1</span>].imshow(warped, cmap=plt.cm.gray)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> ax:</span><br><span class="line">    a.axis(<span class="string">'off'</span>)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><a href="http://scikit-image.org/docs/dev/api/skimage.transform.html#skimage.transform.estimate_transform" target="_blank" rel="noopener">官网参考１</a><br><a href="http://scikit-image.org/docs/0.12.x/api/skimage.transform.html#skimage.transform.warp" target="_blank" rel="noopener">官网参考２</a><br><a href="http://scikit-image.org/docs/dev/auto_examples/xx_applications/plot_geometric.html" target="_blank" rel="noopener">官网参考３</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题（2）</title>
    <link href="http://yoursite.com/2018/11/13/Leetcode%E5%88%B7%E9%A2%98%EF%BC%882%EF%BC%89/"/>
    <id>http://yoursite.com/2018/11/13/Leetcode刷题（2）/</id>
    <published>2018-11-13T08:00:10.000Z</published>
    <updated>2018-11-13T08:01:53.834Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Implement strStr()<br>Implement strStr().<br>Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.<br>Example 1:<br>Input: haystack = “hello”, needle = “ll”<br>Output: 2</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我的解法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == needle.length())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == haystack.length())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i + needle.length() &lt;= haystack.length();i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(haystack.compare(i,needle.length(),needle) == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//别人的解法，其实就是在不使用函数的情况下该有的写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!needle.length()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> n_i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;haystack.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(haystack[i] == needle[n_i]) &#123;</span><br><span class="line">                n_i++;</span><br><span class="line">                <span class="keyword">if</span>(n_i == needle.size()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i-needle.size()+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i = i - n_i;</span><br><span class="line">                n_i = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//与我方法类似的解法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">A_at_B_pos</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span> &amp; A, <span class="keyword">const</span> <span class="built_in">string</span> &amp; B, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pos + A.size() &gt; B.size())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; A.size(); x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[x] != B[pos + x])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(<span class="built_in">string</span> haystack, <span class="built_in">string</span> needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.empty())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; haystack.size(); x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A_at_B_pos(needle, haystack, x))</span><br><span class="line">                <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Search Insert Position<br>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.<br>You may assume no duplicates in the array.<br>Example 1:<br>Input: [1,3,5,6], 5<br>Output: 2</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;:: iterator pos;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(pos = nums.begin();pos &lt; nums.end();++pos)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(*pos &lt; target)</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> nums.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//最快的解法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.size()<span class="number">-1</span>, mid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.size() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(start&lt;=end) &#123;</span><br><span class="line">            mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                end = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                start = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nums[mid] &gt; target? mid:mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p><ol><li>1</li><li>11</li><li>21</li><li>1211</li><li>111221<br>1 is read off as “one 1” or 11.<br>11 is read off as “two 1s” or 21.<br>21 is read off as “one 2, then one 1” or 1211</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本题理解题目就花了２０分钟，然后调试程序又花了许久,使用迭代完成，在运行时间上很慢</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span>==n) <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">string</span> ns = countAndSay(n<span class="number">-1</span>)+<span class="string">"#"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">string</span> sp = ns.substr(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">string</span> nsPlus = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">0</span>;i &lt; ns.length();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span> == sp.compare(ns.substr(i,<span class="number">1</span>)))</span><br><span class="line">                j++;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">string</span> s = <span class="built_in">std</span>::to_string(j);</span><br><span class="line">                nsPlus = nsPlus + s + sp;</span><br><span class="line">                sp = ns.substr(i,<span class="number">1</span>);</span><br><span class="line">                j = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> nsPlus;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//直接生成的在提交的代码里面时运行速度最快的</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">countAndSay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> cur = <span class="string">"1"</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> curChar = cur[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> curCount = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">string</span> tmp = <span class="string">""</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cur.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j == cur.length() || cur[j] != curChar) &#123;</span><br><span class="line">                    tmp += <span class="keyword">char</span>(curCount + <span class="string">'0'</span>);</span><br><span class="line">                    tmp += curChar;</span><br><span class="line">                    curChar = cur[j];</span><br><span class="line">                    curCount = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    curCount++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            cur = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.<br>Example:<br>Input: [-2,1,-3,4,-1,2,1,-5,4],<br>Output: 6<br>Explanation: [4,-1,2,1] has the largest sum = 6.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这道题是真的做了我许久，因为总想有个骚操作，结果代码越写越长，bug也越来越多，最后全删了，重新写过。虽然这份代码跑起来很慢，但是还好还比较简洁，易于理解</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; per_num_sum;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> max_sub_sum = nums[i];</span><br><span class="line">            <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j &lt; nums.size();j++)</span><br><span class="line">            &#123;</span><br><span class="line">                temp += nums[j];</span><br><span class="line">                <span class="keyword">if</span>(temp &gt; max_sub_sum)</span><br><span class="line">                    max_sub_sum = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            per_num_sum.push_back(max_sub_sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator max = max_element(per_num_sum.begin(), per_num_sum.end());</span><br><span class="line">        <span class="keyword">return</span> *max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//看了下这份最快的代码，心态爆炸，最好理解的也是最快的，毕竟只是求子集最大值，并不需要其他的返回</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// popular question</span></span><br><span class="line">        <span class="comment">// strategy: online algorithm</span></span><br><span class="line">        <span class="keyword">int</span> maxSum = INT_MIN;</span><br><span class="line">        <span class="keyword">int</span> thisSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            thisSum += nums[i];</span><br><span class="line">            <span class="keyword">if</span> (thisSum &gt; maxSum) &#123;</span><br><span class="line">                maxSum = thisSum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (thisSum &lt; <span class="number">0</span>)</span><br><span class="line">                thisSum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//一份更为简洁的python代码</span></span><br><span class="line">for i in range(1, len(nums)):</span><br><span class="line">    <span class="keyword">if</span> nums[i<span class="number">-1</span>] &gt; <span class="number">0</span>:</span><br><span class="line">        nums[i] += nums[i<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> max(nums)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Given a string s consists of upper/lower-case alphabets and empty space characters ‘ ‘, return the length of last word in the string.<br>If the last word does not exist, return 0.<br>Note: A word is defined as a character sequence consists of non-space characters only.<br>Example:<br>Input: “Hello World”<br>Output: 5</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这份代码已经是最快的了，但是很明显从背后来会更快</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> b_null = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">' '</span>!= s[s.length()<span class="number">-1</span>-i])</span><br><span class="line">            &#123;</span><br><span class="line">                b_null = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length()- b_null;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">' '</span> == s[i])</span><br><span class="line">                len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                len++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//稍微修改了下</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> fir_null = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = s.length() - <span class="number">1</span>;i &gt;= <span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">' '</span> != s[i])&#123;</span><br><span class="line">                len++;</span><br><span class="line">                fir_null = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(fir_null)</span><br><span class="line">                <span class="keyword">break</span>;       </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//看到个这种的，但是很明显这份代码会很慢</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> buf;</span><br><span class="line">        <span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(s)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (ss &gt;&gt; buf)</span><br><span class="line">            len = buf.length();</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//还有这个究极进化体</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLastWord</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>, tail = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (tail &gt;= <span class="number">0</span> &amp;&amp; s[tail] == <span class="string">' '</span>) tail--;</span><br><span class="line">        <span class="keyword">while</span> (tail &gt;= <span class="number">0</span> &amp;&amp; s[tail--] != <span class="string">' '</span>) len++;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Given two binary trees, write a function to check if they are the same or not.<br>Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也算是独立完成了一个递归，之前的递归总是会看到答案，比如停止条件什么的，最快的答案与我这个没有多大的区别，大概这就是最好想的答案吧。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span> &amp;&amp; q == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((p == <span class="literal">NULL</span> &amp;&amp; q != <span class="literal">NULL</span>) || (p != <span class="literal">NULL</span> &amp;&amp; q == <span class="literal">NULL</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;val == q-&gt;val)</span><br><span class="line">                <span class="keyword">return</span> isSameTree(p-&gt;left,q-&gt;left) &amp;&amp; isSameTree(p-&gt;right,q-&gt;right);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//还有一种就是使用栈，以下是来自评论区的一份代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p &amp;&amp; !q || !p &amp;&amp; q) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!p &amp;&amp; !q) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;TreeNode*&gt; ps, qs;</span><br><span class="line">        ps.push(p);</span><br><span class="line">        qs.push(q);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!ps.empty()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> *pNode = ps.top(), *qNode = qs.top();</span><br><span class="line">            ps.pop();</span><br><span class="line">            qs.pop();</span><br><span class="line">            <span class="keyword">if</span> (pNode-&gt;val != qNode-&gt;val</span><br><span class="line">                || pNode-&gt;left &amp;&amp; !qNode-&gt;left || !pNode-&gt;left &amp;&amp; qNode-&gt;left</span><br><span class="line">                || pNode-&gt;right &amp;&amp; !qNode-&gt;right || !pNode-&gt;right &amp;&amp; qNode-&gt;right) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (pNode-&gt;right) &#123;</span><br><span class="line">                ps.push(pNode-&gt;right);</span><br><span class="line">                qs.push(qNode-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pNode-&gt;left) &#123;</span><br><span class="line">                ps.push(pNode-&gt;left);</span><br><span class="line">                qs.push(qNode-&gt;left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Given a non-empty array of digits representing a non-negative integer, plus one to the integer.<br>The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.<br>You may assume the integer does not contain any leading zero, except the number 0 itself.<br>Example 1:<br>Input: [1,2,3]<br>Output: [1,2,4]<br>Explanation: The array represents the integer 123.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//感觉这样写速度应该还可以</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; plusOne(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits) &#123;</span><br><span class="line">        <span class="keyword">if</span>(digits.back() != <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            digits.back() += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> digits;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;= digits.size();i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(digits[digits.size()-i<span class="number">-1</span>] != <span class="number">9</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    digits[digits.size()-i<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(digits.size() == i)</span><br><span class="line">                digits.insert(digits.begin(),<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                digits[digits.size()-i<span class="number">-1</span>] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这份代码确实精简</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; plusOne(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; digits) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = digits.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; ++digits[i] == <span class="number">10</span>) &#123;</span><br><span class="line">            digits[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                i--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                digits.insert(digits.begin(), <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Given two binary strings, return their sum (also a binary string).<br>The input strings are both non-empty and contains only characters 1 or 0.<br>Example 1:<br>Input: a = “11”, b = “1”<br>Output: “100”<br>Example 2:<br>Input: a = “1010”, b = “1011”<br>Output: “10101”</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//费时许久才完成这个，但是我到现在还是觉得是这个平台编译器的问题，所以我只是换了中写法而已，本质上就是一样的，但是之前确实疯狂报错，而且报的错很离谱</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">addBinary</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> rs = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(a.length() != b.length())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.length() &lt; b.length())</span><br><span class="line">                a.insert(<span class="number">0</span>,<span class="string">"0"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                b.insert(<span class="number">0</span>,<span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i = a.length() - <span class="number">1</span>;i &gt; <span class="number">-1</span>;i--)</span><br><span class="line">        &#123;    </span><br><span class="line">            <span class="keyword">if</span>(a[i] == <span class="string">'0'</span> &amp;&amp; b[i] == <span class="string">'0'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                rs.insert(<span class="number">0</span>,(carry?<span class="string">"1"</span>:<span class="string">"0"</span>));</span><br><span class="line">                carry = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[i] == <span class="string">'0'</span> &amp;&amp; b[i] == <span class="string">'1'</span> || a[i] == <span class="string">'1'</span> &amp;&amp; b[i] == <span class="string">'0'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                rs.insert(<span class="number">0</span>,(carry?<span class="string">"0"</span>:<span class="string">"1"</span>));</span><br><span class="line">                carry = (carry?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[i] == <span class="string">'1'</span> &amp;&amp; b[i] == <span class="string">'1'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                rs.insert(<span class="number">0</span>,(carry?<span class="string">"1"</span>:<span class="string">"0"</span>));</span><br><span class="line">                carry = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(carry)</span><br><span class="line">            rs.insert(<span class="number">0</span>,<span class="string">"1"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> rs;                   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//速度在第一的一个方法，很是精巧</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">addBinary</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">0</span>, i = a.size() - <span class="number">1</span>, j = b.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || c == <span class="number">1</span>) &#123;</span><br><span class="line">            c += i &gt;= <span class="number">0</span> ? a[i--] - <span class="string">'0'</span> : <span class="number">0</span>;</span><br><span class="line">            c += j &gt;= <span class="number">0</span> ? b[j--] - <span class="string">'0'</span> : <span class="number">0</span>;</span><br><span class="line">            s = <span class="keyword">char</span>(c % <span class="number">2</span> + <span class="string">'0'</span>) + s;</span><br><span class="line">            c /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后评论区一个短小精悍的python代码来了&gt;__&lt;</span></span><br><span class="line"><span class="keyword">return</span> str(bin(<span class="keyword">int</span>(a, <span class="number">2</span>) + <span class="keyword">int</span>(b, <span class="number">2</span>)))[<span class="number">2</span>:]</span><br></pre></td></tr></table></figure><blockquote><p>Implement int sqrt(int x).<br>Compute and return the square root of x, where x is guaranteed to be a non-negative integer.<br>Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本段代码是通过数字的二进制有多少位来确定一个计算区间，在运算的时候受到了乘法溢出的影响，还好换成long就解决了</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">8</span>*<span class="keyword">sizeof</span>(x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> reverX = ~x;</span><br><span class="line">        <span class="keyword">int</span> preZeroLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(reverX &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            reverX = reverX &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            preZeroLen++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> realLen = len - preZeroLen;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> start = <span class="built_in">pow</span>(<span class="number">2</span>,(realLen<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> end = <span class="built_in">pow</span>(<span class="number">2</span>,(realLen+<span class="number">1</span>)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> medium = (start + end)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((start+<span class="number">1</span>) != end &amp;&amp; (medium*medium)!=x)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(medium*medium &gt;= x)</span><br><span class="line">                end = medium;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                start = medium;</span><br><span class="line">            medium = (start + end)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> medium;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一快的代码，把二分和迭代的思想用到了极致啊，真是不错</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> r = x;</span><br><span class="line">        <span class="keyword">while</span> (r &gt; x / r) &#123;</span><br><span class="line">            r = (r + x / r) / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>You are climbing a stair case. It takes n steps to reach to the top.<br>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?<br>Note: Given n will be a positive integer.<br>Example 1:<br>Input: 2<br>Output: 2<br>Explanation: There are two ways to climb to the top.</p><ol><li>1 step + 1 step</li><li>2 steps</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头一次递归碰到报超时的，其实结果应该是对的，但是不满足要求，先记着吧，再说</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span> ==n)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">2</span> == n)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> climbStairs(n<span class="number">-1</span>)+climbStairs(n<span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于需要加速于是有了以下代码（还是评论区大佬的），unordered_map比一般的map查询速度更快存储消耗更多</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; maps;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span> == n)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">2</span> == n)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(maps[n])</span><br><span class="line">                <span class="keyword">return</span> maps[n];</span><br><span class="line">            <span class="keyword">int</span> val = climbStairs(n<span class="number">-1</span>) + climbStairs(n<span class="number">-2</span>);</span><br><span class="line">            maps[n] = val;</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//另一个刚好相反思想的代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> dp[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i] = dp[i<span class="number">-1</span>] + dp[i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Implement strStr()&lt;br&gt;Implement strStr().&lt;br&gt;Return the index of the first occurrence of needle in haystack, or -1 if needle
      
    
    </summary>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题（1）</title>
    <link href="http://yoursite.com/2018/10/04/leetcode%E5%88%B7%E9%A2%98%EF%BC%881%EF%BC%89/"/>
    <id>http://yoursite.com/2018/10/04/leetcode刷题（1）/</id>
    <published>2018-10-04T03:53:06.000Z</published>
    <updated>2018-10-04T04:02:51.300Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.You may assume that each input would have exactly one solution, and you may not use the same element twice.Example:<br>Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我的解决思路：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rs;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j &lt; nums.size(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(target - nums[i] == nums[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    rs.push_back(i);</span><br><span class="line">                    rs.push_back(j);</span><br><span class="line">                    <span class="keyword">return</span> rs;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//看了答案后重新添加了两种时间和存储都在o(n)级别的代码，其实都是hash表的应用：</span></span><br><span class="line"><span class="comment">//其一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rs;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hashT;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            hashT[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> component = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(hashT.find(component)!=hashT.end() &amp;&amp; hashT[component]!=i)</span><br><span class="line">            &#123;</span><br><span class="line">                rs.push_back(hashT[component]);</span><br><span class="line">                rs.push_back(i);</span><br><span class="line">                <span class="keyword">return</span> rs;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//其二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rs;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hashT;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> component = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(hashT.find(component)!=hashT.end())</span><br><span class="line">            &#123;</span><br><span class="line">                rs.push_back(hashT[component]);</span><br><span class="line">                rs.push_back(i);</span><br><span class="line">                <span class="keyword">return</span> rs;</span><br><span class="line">            &#125;</span><br><span class="line">            hashT[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Given a 32-bit signed integer, reverse digits of an integer<br>Example 1:<br>Input: 123<br>Output: 321</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这份代码是错的，我在vs上试了，在对于数字-2147483412的时候，但是为何会这样，必须有个记录。找到错误的原因了，bit_class使用的是float,所以在后面的(int)(bit*bit_class)这般才能解决问题。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;  </span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num_per_bit;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">abs</span>(x) &gt;= <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num_per_bit.push_back(x % <span class="number">10</span>);</span><br><span class="line">            x = x / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        num_per_bit.push_back(x);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> out = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">float</span> bit_class = <span class="number">0.1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; num_per_bit.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">int</span> bit = num_per_bit[num_per_bit.size()-i<span class="number">-1</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (bit*bit_class &gt; <span class="number">200000000</span> || (bit*bit_class == <span class="number">200000000</span> &amp;&amp; out &gt; <span class="number">147483647</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (bit*bit_class &lt; <span class="number">-200000000</span> || (bit*bit_class == <span class="number">-200000000</span> &amp;&amp; out &lt; <span class="number">-147483648</span>)) </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            bit_class = bit_class*<span class="number">10</span>;</span><br><span class="line">            out  = (out + bit*bit_class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正确答案</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> rev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pop = x%<span class="number">10</span>;</span><br><span class="line">            x = x/<span class="number">10</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(rev &gt; INT_MAX/<span class="number">10</span>||rev == INT_MAX/<span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(rev &lt; INT_MIN/<span class="number">10</span>||rev == INT_MIN/<span class="number">10</span> &amp;&amp; pop &lt; <span class="number">-8</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            rev = rev*<span class="number">10</span> +pop;</span><br><span class="line">        &#125;  </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> rev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有了昨天题目的折磨后，便直接使用了逆转来完成，不过应该效率不高</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> rev = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> c_x = x;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pop = x%<span class="number">10</span>;</span><br><span class="line">            x = x/<span class="number">10</span>;</span><br><span class="line">            </span><br><span class="line">            rev = rev*<span class="number">10</span> +pop;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(rev == c_x)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//看了答案后的，其实就是控制了下reverse的数量</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x%<span class="number">10</span> == <span class="number">0</span>&amp;&amp;x!=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> rev = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(rev &lt; x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pop = x%<span class="number">10</span>;</span><br><span class="line">            x = x/<span class="number">10</span>;</span><br><span class="line">            rev = rev*<span class="number">10</span> +pop;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(rev == x || rev/<span class="number">10</span> == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.<br>Symbol       Value<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>For example, two is written as II in Roman numeral, just two one’s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.<br>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:<br>I can be placed before V (5) and X (10) to make 4 and 9.<br>X can be placed before L (50) and C (100) to make 40 and 90.<br>C can be placed before D (500) and M (1000) to make 400 and 900.<br>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我的解决方案，但是被switch以及substr影响了许久</span></span><br><span class="line"><span class="comment">//substr有2种用法：假设：string s = "0123456789";</span></span><br><span class="line"><span class="comment">//string sub1 = s.substr(5); //只有一个数字5表示从下标为5开始一直到结尾：sub1 = "56789"</span></span><br><span class="line"><span class="comment">//string sub2 = s.substr(5, 3); //从下标为5开始截取长度为3位：sub2 = "567"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num_iter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; s.length();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> s1= s.substr(i,<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(s1 == <span class="string">"I"</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num_iter += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(s.substr(i+<span class="number">1</span>,<span class="number">1</span>) == <span class="string">"V"</span> || s.substr(i+<span class="number">1</span>,<span class="number">1</span>) == <span class="string">"X"</span>)</span><br><span class="line">                    num_iter -=<span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s1 == <span class="string">"V"</span>)&#123;</span><br><span class="line">                num_iter += <span class="number">5</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s1 == <span class="string">"X"</span>)&#123;</span><br><span class="line">                num_iter += <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">if</span>(s.substr(i+<span class="number">1</span>,<span class="number">1</span>) == <span class="string">"L"</span> || s.substr(i+<span class="number">1</span>,<span class="number">1</span>) == <span class="string">"C"</span>)</span><br><span class="line">                    num_iter -=<span class="number">20</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s1 == <span class="string">"L"</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num_iter += <span class="number">50</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s1 == <span class="string">"C"</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num_iter += <span class="number">100</span>;</span><br><span class="line">                <span class="keyword">if</span>(s.substr(i+<span class="number">1</span>,<span class="number">1</span>) == <span class="string">"D"</span> || s.substr(i+<span class="number">1</span>,<span class="number">1</span>) == <span class="string">"M"</span>)</span><br><span class="line">                    num_iter -=<span class="number">200</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s1 == <span class="string">"D"</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num_iter += <span class="number">500</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s1 == <span class="string">"M"</span>)&#123;</span><br><span class="line">                num_iter += <span class="number">1000</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> num_iter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在discuss里看到的一份解答，感觉不错</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(<span class="built_in">string</span> s)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; T = &#123; &#123; <span class="string">'I'</span> , <span class="number">1</span> &#125;,</span><br><span class="line">                                   &#123; <span class="string">'V'</span> , <span class="number">5</span> &#125;,</span><br><span class="line">                                   &#123; <span class="string">'X'</span> , <span class="number">10</span> &#125;,</span><br><span class="line">                                   &#123; <span class="string">'L'</span> , <span class="number">50</span> &#125;,</span><br><span class="line">                                   &#123; <span class="string">'C'</span> , <span class="number">100</span> &#125;,</span><br><span class="line">                                   &#123; <span class="string">'D'</span> , <span class="number">500</span> &#125;,</span><br><span class="line">                                   &#123; <span class="string">'M'</span> , <span class="number">1000</span> &#125; &#125;;</span><br><span class="line">                                   </span><br><span class="line">   <span class="keyword">int</span> sum = T[s.back()];</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) </span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (T[s[i]] &lt; T[s[i + <span class="number">1</span>]])</span><br><span class="line">       &#123;</span><br><span class="line">           sum -= T[s[i]];</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">           sum += T[s[i]];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Write a function to find the longest common prefix string amongst an array of strings.<br>If there is no common prefix, return an empty string “”.<br>Example 1:<br>Input: [“flower”,”flow”,”flight”]<br>Output: “fl”<br>Example 2:<br>Input: [“dog”,”racecar”,”car”]<br>Output: “”<br>Explanation: There is no common prefix among the input strings.<br>Note:<br>All given inputs are in lowercase letters a-z.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">bool</span> f = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> i_c = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> prefix = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span>(f&amp;&amp;strs.size()&gt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i_s = <span class="number">0</span>;i_s &lt; strs.size()<span class="number">-1</span>;i_s++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!(strs[i_s].length() &gt; i_c) || !(strs[i_s+<span class="number">1</span>].length() &gt; i_c))</span><br><span class="line">                    <span class="keyword">return</span> prefix;</span><br><span class="line">                <span class="keyword">if</span>(strs[i_s].substr(i_c,<span class="number">1</span>)!=strs[i_s+<span class="number">1</span>].substr(i_c,<span class="number">1</span>) )</span><br><span class="line">                &#123;</span><br><span class="line">                    f = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(f) prefix = prefix + strs[<span class="number">0</span>].substr(i_c,<span class="number">1</span>);</span><br><span class="line">            i_c++;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1</span> == strs.size())</span><br><span class="line">            prefix = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这是答案中解法1自己写的c++版本</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">longestCommonPrefix</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == strs.size())</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="built_in">string</span> prefix = strs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; strs.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(strs[i].find(prefix)!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                prefix = prefix.substr(<span class="number">0</span>,prefix.length()<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">if</span>(!prefix.compare(<span class="string">""</span>))</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><ol><li>Remove Duplicates from Sorted Array</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i_conquer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; nums.size();i++)</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">if</span>(nums[i_conquer] != nums[i])</span><br><span class="line">            &#123;</span><br><span class="line">                i_conquer++;</span><br><span class="line">                nums[i_conquer] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>==nums.size()?<span class="number">0</span>:i_conquer+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Remove Nth Node From End of List</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head-&gt;next == <span class="literal">NULL</span>&amp;&amp; n==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">        ListNode* s;</span><br><span class="line">        s = head;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(s-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len++;</span><br><span class="line">            s = s-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>((len) &lt; n)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(len == n)</span><br><span class="line">            <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">        </span><br><span class="line">        s = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len-n<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            s = s-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        s-&gt;next = s-&gt;next-&gt;next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//第二种解法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">removeNthFromEnd</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head-&gt;next == <span class="literal">NULL</span>&amp;&amp; n==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* first = head;</span><br><span class="line">        ListNode* second = head;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            first = first-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(first == <span class="literal">NULL</span>)   <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(first-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            first = first-&gt;next;</span><br><span class="line">            second = second-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        second-&gt;next = second-&gt;next-&gt;next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Valid Parentheses<br>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.<br>An input string is valid if:<br>Open brackets must be closed by the same type of brackets.<br>Open brackets must be closed in the correct order.<br>Note that an empty string is also considered valid.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我的解法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == s.length())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; <span class="built_in">stack</span>;</span><br><span class="line">        <span class="built_in">stack</span>.push_back(s[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">char</span>&gt; left_to_right = &#123;&#123;<span class="string">'&#123;'</span>, <span class="string">'&#125;'</span>&#125;,</span><br><span class="line">                                              &#123;<span class="string">'['</span>, <span class="string">']'</span>&#125;,</span><br><span class="line">                                              &#123;<span class="string">'('</span>, <span class="string">')'</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; s.length();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(left_to_right[<span class="built_in">stack</span>.back()] == s[i])</span><br><span class="line">                <span class="built_in">stack</span>.pop_back();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">stack</span>.push_back(s[i]);</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">stack</span>.empty())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>Merge Two Sorted Lists<br>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.<br>Example:<br>Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//花的时间太久了，加上debug快两个小时了，和十五分钟一个相差甚远</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* merge;</span><br><span class="line">        ListNode* l1_c = l1;</span><br><span class="line">        ListNode* l2_c = l2;</span><br><span class="line">        ListNode* merge_c;</span><br><span class="line">        </span><br><span class="line">        merge = (ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">        merge_c = merge;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == l1 &amp;&amp; <span class="literal">NULL</span> != l2) <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> != l1 &amp;&amp; <span class="literal">NULL</span> == l2) <span class="keyword">return</span> l1;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == l1 &amp;&amp; <span class="literal">NULL</span> == l2) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(l1_c-&gt;val &lt;= l2_c-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            merge_c-&gt;val = l1_c-&gt;val;</span><br><span class="line">            l1_c = l1_c-&gt;next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            merge_c-&gt;val = l2_c-&gt;val;</span><br><span class="line">            l2_c = l2_c-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        merge_c-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">NULL</span> != l1_c&amp;&amp; <span class="literal">NULL</span> != l2_c)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* newNode;</span><br><span class="line">            newNode = (ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">            merge_c-&gt;next = newNode;</span><br><span class="line">            <span class="keyword">if</span>(l1_c-&gt;val &lt;= l2_c-&gt;val)</span><br><span class="line">            &#123;</span><br><span class="line">                newNode-&gt;val = l1_c-&gt;val;</span><br><span class="line">                l1_c = l1_c-&gt;next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                newNode-&gt;val = l2_c-&gt;val;</span><br><span class="line">                l2_c = l2_c-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            newNode-&gt;next = <span class="literal">NULL</span>; </span><br><span class="line">            merge_c = merge_c-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode* l3;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == l1_c &amp;&amp; <span class="literal">NULL</span> != l2_c)</span><br><span class="line">        &#123;</span><br><span class="line">            l3 = l2_c;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="literal">NULL</span> != l1_c &amp;&amp; <span class="literal">NULL</span> == l2_c)&#123;</span><br><span class="line">            l3 = l1_c;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> merge;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">NULL</span> != l3)</span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* newNode;</span><br><span class="line">            newNode = (ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">            merge_c-&gt;next = newNode;</span><br><span class="line">            newNode-&gt;val = l3-&gt;val;</span><br><span class="line">            newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">            l3 = l3-&gt;next;</span><br><span class="line">            </span><br><span class="line">            merge_c = merge_c-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> merge;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在discussion里面看到一个十分棒的解题思路,货比货，还得扔，不过在运行时长上倒是一致，可能是递归的原因吧</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">mergeTwoLists</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == l1)  <span class="keyword">return</span> l2;</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == l2)  <span class="keyword">return</span> l1;</span><br><span class="line">        <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt;val)</span><br><span class="line">        &#123;</span><br><span class="line">            l1-&gt;next = mergeTwoLists(l1-&gt;next,l2);</span><br><span class="line">            <span class="keyword">return</span> l1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l2-&gt;next = mergeTwoLists(l1,l2-&gt;next);</span><br><span class="line">            <span class="keyword">return</span> l2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//至于其它的方法思想大概都一致，不过他们没有生成新的空间而已，照着这个思路来完成代码应该与他们的结果没多大区别</span></span><br></pre></td></tr></table></figure><blockquote><p>Given an array nums and a value val, remove all instances of that value in-place and return the new length.<br>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.<br>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.<br>Example 1:<br>Given nums = [3,2,2,3], val = 3,<br>Your function should return length = 2, with the first two elements of nums being 2.<br>It doesn’t matter what you leave beyond the returned length.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这段代码我在临界区调bug调了一个多小时，一开始的思想就是一头一尾两个index来寻，感觉真机智，现在感觉石乐志。很多时候灵机一动不如深思熟虑，虽然这份代码也不是没用就是，因为我这个在完全只使用数组的时候还有用，但在使用了向量后便一无是处。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == nums.size())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> front = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> back = nums.size()<span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(;front &lt; back;front++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(val == nums[front])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(val == nums[back] &amp;&amp; front &lt; back)</span><br><span class="line">                    back--;</span><br><span class="line">                <span class="keyword">if</span>(front == back)</span><br><span class="line">                &#123;</span><br><span class="line">                    front--;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                         </span><br><span class="line">                nums[front] = nums[back];</span><br><span class="line">                <span class="keyword">if</span>((front+<span class="number">1</span>) == back)   <span class="keyword">return</span> front+<span class="number">1</span>;</span><br><span class="line">                back--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(val != nums[front])  <span class="keyword">return</span> front+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>  <span class="keyword">return</span> front;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相同交换思想但是比我逻辑通顺得多的代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; nums.size())&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == val)&#123;</span><br><span class="line">                swap(nums[i], nums.back());</span><br><span class="line">                nums.pop_back();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//很好利用了vector特点的代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> it = nums.begin();</span><br><span class="line">        <span class="keyword">while</span>(it != nums.end()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(*(it) == val) &#123;</span><br><span class="line">                it = nums.erase(it);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                it++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Given an array of integers, return indices of the two numbers such that they add up to a specific target.You may assume that
      
    
    </summary>
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>识别人脸特征点(tensorflow+python+模型的使用)</title>
    <link href="http://yoursite.com/2018/09/06/%E8%AF%86%E5%88%AB%E4%BA%BA%E8%84%B8%E7%89%B9%E5%BE%81%E7%82%B9-tensorflow-python-%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/09/06/识别人脸特征点-tensorflow-python-模型的使用/</id>
    <published>2018-09-06T02:59:26.000Z</published>
    <updated>2018-09-06T03:32:18.527Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 在这次学习的过程中遇到的最大的问题就是如何使用保存好的模型进行预测，在这里贴一下代码，其实一目了然。</p></blockquote><h2 id="model-py"><a href="#model-py" class="headerlink" title="model.py"></a>model.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span>  numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TRAIN_FILE = <span class="string">'training.csv'</span></span><br><span class="line">TEST_FILE = <span class="string">'test.csv'</span></span><br><span class="line">SAVE_PATH = <span class="string">'models/model'</span></span><br><span class="line"></span><br><span class="line">VALIDATION_SIZE = <span class="number">100</span>     <span class="comment">#验证集大小</span></span><br><span class="line">EPOCHS = <span class="number">200</span>              <span class="comment">#迭代次数</span></span><br><span class="line">BATCH_SIZE = <span class="number">100</span>          <span class="comment">#batch大小</span></span><br><span class="line">EARLY_STOP_PATIENCE = <span class="number">10</span>  <span class="comment">#early stopping的参数</span></span><br><span class="line">LEARN_RATE = <span class="number">1e-3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据给定的shape定义并初始化卷积核的权值变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape,name)</span>:</span></span><br><span class="line">    initial = tf.truncated_normal(shape, stddev=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial,name=name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据shape初始化bias变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(shape,name)</span>:</span></span><br><span class="line">    initial = tf.constant(<span class="number">0.1</span>, shape=shape)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial,name=name)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义卷积层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x, W, b, strides=<span class="number">1</span>)</span>:</span></span><br><span class="line">    x = tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, strides, strides, <span class="number">1</span>], padding=<span class="string">'VALID'</span>)</span><br><span class="line">    x = tf.nn.bias_add(x, b)</span><br><span class="line">    <span class="keyword">return</span> tf.nn.relu(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义池化层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxpool2d</span><span class="params">(x, k=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>, k, k, <span class="number">1</span>], strides=[<span class="number">1</span>, k, k, <span class="number">1</span>],padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line">x = tf.placeholder(<span class="string">'float'</span>,shape=[<span class="keyword">None</span>,<span class="number">96</span>*<span class="number">96</span>],name=<span class="string">'x'</span>)</span><br><span class="line">y_ = tf.placeholder(<span class="string">"float"</span>,shape=[<span class="keyword">None</span>,<span class="number">30</span>],name=<span class="string">'y_'</span>)</span><br><span class="line">keep_prob = tf.placeholder(<span class="string">"float"</span>,name=<span class="string">'keep_prob'</span>)</span><br><span class="line">sf = tf.constant(<span class="number">1.0</span>, shape=[<span class="number">30</span>])</span><br><span class="line">tf.Variable(sf)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义网络模型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">()</span>:</span></span><br><span class="line">    x_image = tf.reshape(x,[<span class="number">-1</span>, <span class="number">96</span>, <span class="number">96</span>, <span class="number">1</span>])</span><br><span class="line">    W_conv1 = weight_variable([<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">32</span>],<span class="string">'wc1'</span>)</span><br><span class="line">    b_conv1 = bias_variable([<span class="number">32</span>],<span class="string">'bc1'</span>)</span><br><span class="line">    h_conv1 = conv2d(x_image,W_conv1,b_conv1)</span><br><span class="line">    h_pool1 = maxpool2d(h_conv1)</span><br><span class="line"></span><br><span class="line">    W_conv2 = weight_variable([<span class="number">2</span>, <span class="number">2</span>, <span class="number">32</span>, <span class="number">64</span>],<span class="string">'wc2'</span>)</span><br><span class="line">    b_conv2 = bias_variable([<span class="number">64</span>],<span class="string">'bc2'</span>)</span><br><span class="line">    h_conv2 = conv2d(h_pool1, W_conv2, b_conv2)</span><br><span class="line">    h_pool2 = maxpool2d(h_conv2)</span><br><span class="line"></span><br><span class="line">    W_conv3 = weight_variable([<span class="number">2</span>, <span class="number">2</span>, <span class="number">64</span>, <span class="number">128</span>],<span class="string">'wc3'</span>)</span><br><span class="line">    b_conv3 = bias_variable([<span class="number">128</span>],<span class="string">'bc3'</span>)</span><br><span class="line">    h_conv3 = conv2d(h_pool2, W_conv3, b_conv3)</span><br><span class="line">    h_pool3 = maxpool2d(h_conv3)</span><br><span class="line"></span><br><span class="line">    W_fc1 = weight_variable([<span class="number">11</span>*<span class="number">11</span>*<span class="number">128</span>,<span class="number">500</span>],<span class="string">'wf1'</span>)</span><br><span class="line">    b_fc1 = bias_variable([<span class="number">500</span>],<span class="string">'bf1'</span>)</span><br><span class="line">    h_pool3_flat = tf.reshape(h_pool3,[<span class="number">-1</span>,<span class="number">11</span>*<span class="number">11</span>*<span class="number">128</span>])</span><br><span class="line">    h_fc1 = tf.nn.relu(tf.matmul(h_pool3_flat,W_fc1) + b_fc1)</span><br><span class="line"></span><br><span class="line">    W_fc2 = weight_variable([<span class="number">500</span>,<span class="number">500</span>],<span class="string">'wf2'</span>)</span><br><span class="line">    b_fc2 = bias_variable([<span class="number">500</span>],<span class="string">'bf2'</span>)</span><br><span class="line">    h_fc2 = tf.nn.relu(tf.matmul(h_fc1,W_fc2) + b_fc2)</span><br><span class="line">    h_fc2_drop = tf.nn.dropout(h_fc2,keep_prob)</span><br><span class="line"></span><br><span class="line">    W_fc3 = weight_variable([<span class="number">500</span>,<span class="number">30</span>],<span class="string">'wf3'</span>)</span><br><span class="line">    b_fc3 = bias_variable([<span class="number">30</span>],<span class="string">'bf3'</span>)</span><br><span class="line"></span><br><span class="line">    y_conv = tf.matmul(h_fc2_drop,W_fc3) + b_fc3</span><br><span class="line"></span><br><span class="line">    y_r = tf.multiply(y_conv,sf,name=<span class="string">'y_r'</span>)</span><br><span class="line"></span><br><span class="line">    rmse = tf.sqrt(tf.reduce_mean(tf.square(y_ - y_conv)),name=<span class="string">'rmse'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y_r,rmse</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据导入处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_data</span><span class="params">(test=False)</span>:</span></span><br><span class="line">    file_name = TEST_FILE <span class="keyword">if</span> test  <span class="keyword">else</span> TRAIN_FILE</span><br><span class="line">    df = pd.read_csv(file_name)</span><br><span class="line">    cols = df.columns[:<span class="number">-1</span>]<span class="comment">#载入列数据（不包括最后一列）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#dropna()是丢弃有缺失数据的样本</span></span><br><span class="line">    df = df.dropna()</span><br><span class="line">    df[<span class="string">'Image'</span>] = df[<span class="string">'Image'</span>].apply(<span class="keyword">lambda</span> img:np.fromstring(img,sep=<span class="string">' '</span>)/<span class="number">255.0</span>)<span class="comment">#载入图片数据，lambda代表的就是df['Image']</span></span><br><span class="line"></span><br><span class="line">    X = np.vstack(df[<span class="string">'Image'</span>])</span><br><span class="line">    <span class="comment">#X = X.reshape((-1,96,96,1))</span></span><br><span class="line">    print(X.shape)</span><br><span class="line">    print(X.dtype)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> test:</span><br><span class="line">        y = <span class="keyword">None</span></span><br><span class="line">        <span class="comment"># 显示其中的一张图片</span></span><br><span class="line">        <span class="comment"># S = (X[10].reshape((96,96))*255.0)</span></span><br><span class="line">        <span class="comment"># print(S.shape)</span></span><br><span class="line">        <span class="comment"># print(S.dtype)</span></span><br><span class="line">        <span class="comment"># print(S)</span></span><br><span class="line">        <span class="comment"># S = S.astype(np.int32)</span></span><br><span class="line">        <span class="comment"># #plt.imshow(S,plt.get_cmap('gray'))</span></span><br><span class="line">        <span class="comment"># plt.imshow(S)</span></span><br><span class="line">        <span class="comment"># plt.show()</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y = df[cols].values / <span class="number">96.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> X,y</span><br><span class="line"></span><br><span class="line">keypoint_index = &#123;</span><br><span class="line">        <span class="string">'left_eye_center_x'</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">'left_eye_center_y'</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">'right_eye_center_x'</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="string">'right_eye_center_y'</span>:<span class="number">3</span>,</span><br><span class="line">        <span class="string">'left_eye_inner_corner_x'</span>:<span class="number">4</span>,</span><br><span class="line">        <span class="string">'left_eye_inner_corner_y'</span>:<span class="number">5</span>,</span><br><span class="line">        <span class="string">'left_eye_outer_corner_x'</span>:<span class="number">6</span>,</span><br><span class="line">        <span class="string">'left_eye_outer_corner_y'</span>:<span class="number">7</span>,</span><br><span class="line">        <span class="string">'right_eye_inner_corner_x'</span>:<span class="number">8</span>,</span><br><span class="line">        <span class="string">'right_eye_inner_corner_y'</span>:<span class="number">9</span>,</span><br><span class="line">        <span class="string">'right_eye_outer_corner_x'</span>:<span class="number">10</span>,</span><br><span class="line">        <span class="string">'right_eye_outer_corner_y'</span>:<span class="number">11</span>,</span><br><span class="line">        <span class="string">'left_eyebrow_inner_end_x'</span>:<span class="number">12</span>,</span><br><span class="line">        <span class="string">'left_eyebrow_inner_end_y'</span>:<span class="number">13</span>,</span><br><span class="line">        <span class="string">'left_eyebrow_outer_end_x'</span>:<span class="number">14</span>,</span><br><span class="line">        <span class="string">'left_eyebrow_outer_end_y'</span>:<span class="number">15</span>,</span><br><span class="line">        <span class="string">'right_eyebrow_inner_end_x'</span>:<span class="number">16</span>,</span><br><span class="line">        <span class="string">'right_eyebrow_inner_end_y'</span>:<span class="number">17</span>,</span><br><span class="line">        <span class="string">'right_eyebrow_outer_end_x'</span>:<span class="number">18</span>,</span><br><span class="line">        <span class="string">'right_eyebrow_outer_end_y'</span>:<span class="number">19</span>,</span><br><span class="line">        <span class="string">'nose_tip_x'</span>:<span class="number">20</span>,</span><br><span class="line">        <span class="string">'nose_tip_y'</span>:<span class="number">21</span>,</span><br><span class="line">        <span class="string">'mouth_left_corner_x'</span>:<span class="number">22</span>,</span><br><span class="line">        <span class="string">'mouth_left_corner_y'</span>:<span class="number">23</span>,</span><br><span class="line">        <span class="string">'mouth_right_corner_x'</span>:<span class="number">24</span>,</span><br><span class="line">        <span class="string">'mouth_right_corner_y'</span>:<span class="number">25</span>,</span><br><span class="line">        <span class="string">'mouth_center_top_lip_x'</span>:<span class="number">26</span>,</span><br><span class="line">        <span class="string">'mouth_center_top_lip_y'</span>:<span class="number">27</span>,</span><br><span class="line">        <span class="string">'mouth_center_bottom_lip_x'</span>:<span class="number">28</span>,</span><br><span class="line">        <span class="string">'mouth_center_bottom_lip_y'</span>:<span class="number">29</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_model</span><span class="params">(saver,sess,save_path)</span>:</span></span><br><span class="line">    path = saver.save(sess,save_path)</span><br><span class="line">    print(<span class="string">'model save in :&#123;0&#125;'</span>.format(path))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(y_conv)</span>:</span></span><br><span class="line">    X,y = input_data(test=<span class="keyword">True</span>)</span><br><span class="line">    y_pred = []</span><br><span class="line"></span><br><span class="line">    TEST_SIZE = X.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,TEST_SIZE,BATCH_SIZE):</span><br><span class="line">        y_batch = y_conv.eval(feed_dict=&#123;x:X[j:j+BATCH_SIZE],keep_prob:<span class="number">1.0</span>&#125;)</span><br><span class="line">        y_pred.extend(y_batch)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'predict test image done!'</span>)</span><br><span class="line"></span><br><span class="line">    output_file = open(<span class="string">'submit.csv'</span>,<span class="string">'w'</span>)</span><br><span class="line">    output_file.write(<span class="string">'RowId,Location\n'</span>)</span><br><span class="line"></span><br><span class="line">    IdLookupTable = open(<span class="string">'IdLookUpTable.csv'</span>)</span><br><span class="line">    IdLookupTable.readline()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> IdLookupTable:</span><br><span class="line">        RowId, ImageId, FeatureName = line.rstrip().split(<span class="string">','</span>)<span class="comment">#rstrip() 删除 string 字符串末尾的指定字符（默认为空格）</span></span><br><span class="line">        image_index = int(ImageId) - <span class="number">1</span></span><br><span class="line">        feature_index = keypoint_index[FeatureName]</span><br><span class="line">        feature_location = y_pred[image_index][feature_index] * <span class="number">96</span></span><br><span class="line">        output_file.write(<span class="string">'&#123;0&#125;,&#123;1&#125;\n'</span>.format(RowId, feature_location))</span><br><span class="line"></span><br><span class="line">    output_file.close()</span><br><span class="line">    IdLookupTable.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sess = tf.InteractiveSession()</span><br><span class="line">    y_conv,rmse=model()</span><br><span class="line">    train_step = tf.train.AdamOptimizer(LEARN_RATE).minimize(rmse)</span><br><span class="line"></span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    X,y = input_data()</span><br><span class="line">    print(X.shape)</span><br><span class="line">    X_valid,y_valid = X[:VALIDATION_SIZE],y[:VALIDATION_SIZE]</span><br><span class="line">    X_train,y_train = X[VALIDATION_SIZE:],y[VALIDATION_SIZE:]</span><br><span class="line"></span><br><span class="line">    best_validation_loss = <span class="number">1000000.0</span></span><br><span class="line">    current_epoch = <span class="number">0</span></span><br><span class="line">    TRAIN_SIZE = X_train.shape[<span class="number">0</span>]</span><br><span class="line">    train_index = list(range(TRAIN_SIZE))</span><br><span class="line">    np.random.shuffle(train_index)</span><br><span class="line">    X_train,y_train = X_train[train_index],y_train[train_index]</span><br><span class="line"></span><br><span class="line">    print(X_train.shape)</span><br><span class="line"></span><br><span class="line">    saver = tf.train.Saver()</span><br><span class="line">    print(<span class="string">'begin training..., train dataset size:&#123;0&#125;'</span>.format(TRAIN_SIZE))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(EPOCHS):</span><br><span class="line">        np.random.shuffle(train_index)</span><br><span class="line">        X_train,y_train = X_train[train_index],y_train[train_index]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,TRAIN_SIZE,BATCH_SIZE):</span><br><span class="line">            print(<span class="string">'epoch&#123;0&#125;,train&#123;1&#125; samples done...'</span>.format(i,j))</span><br><span class="line"></span><br><span class="line">            train_step.run(feed_dict=&#123;x:X_train[j:j+BATCH_SIZE],</span><br><span class="line">                y_:y_train[j:j+BATCH_SIZE],keep_prob:<span class="number">0.5</span>&#125;)</span><br><span class="line"></span><br><span class="line">        validation_loss = rmse.eval(feed_dict=&#123;x:X_valid,y_:y_valid,keep_prob:<span class="number">1.0</span>&#125;)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'epoch &#123;0&#125; done! validation loss:&#123;1&#125;'</span>.format(i,validation_loss*<span class="number">96.0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> validation_loss &lt; best_validation_loss:</span><br><span class="line">            best_validation_loss = validation_loss</span><br><span class="line">            current_epoch = i</span><br><span class="line">            save_model(saver,sess,SAVE_PATH)</span><br><span class="line">        <span class="keyword">elif</span> (i - current_epoch) &gt;= EARLY_STOP_PATIENCE:</span><br><span class="line">            print(<span class="string">'early stopping'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    predict(y_conv)</span><br><span class="line">    print(<span class="string">'predict done'</span>)</span><br></pre></td></tr></table></figure><h2 id="predict-py"><a href="#predict-py" class="headerlink" title="predict.py"></a>predict.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rgb_to_gray</span><span class="params">(rgb)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.dot(rgb[...,:<span class="number">3</span>], [<span class="number">0.299</span>, <span class="number">0.587</span>, <span class="number">0.114</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_to_data</span><span class="params">(img)</span>:</span></span><br><span class="line">    gray = rgb_to_gray(img)</span><br><span class="line">    <span class="comment"># plt.imshow(gray,plt.get_cmap('gray'))</span></span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line">    data = gray / <span class="number">255.0</span></span><br><span class="line">    data = data.reshape([<span class="number">1</span>, <span class="number">96</span> * <span class="number">96</span>])</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">img = plt.imread(<span class="string">'./test_images/predict5.jpg'</span>)</span><br><span class="line">data = img_to_data(img)</span><br><span class="line"></span><br><span class="line">gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=<span class="number">0.333</span>)<span class="comment">#显式地指定需要分配的显存比例</span></span><br><span class="line">sess = tf.Session(config=tf.ConfigProto(gpu_options=gpu_options))</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用训练好的模型预测</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">saver = tf.train.import_meta_graph(<span class="string">'models/model.meta'</span>)</span><br><span class="line">saver.restore(sess, tf.train.latest_checkpoint(<span class="string">'models/'</span>))</span><br><span class="line">graph = tf.get_default_graph()</span><br><span class="line">x = graph.get_tensor_by_name(<span class="string">"x:0"</span>)</span><br><span class="line"></span><br><span class="line">y_r = graph.get_tensor_by_name(<span class="string">"y_r:0"</span>)</span><br><span class="line">keep_prob = graph.get_tensor_by_name(<span class="string">"keep_prob:0"</span>)</span><br><span class="line"></span><br><span class="line">feed_dict = &#123;x:data,keep_prob:<span class="number">1.0</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图片</span></span><br><span class="line">result = sess.run(y_r,feed_dict)</span><br><span class="line">result = result*<span class="number">96.0</span></span><br><span class="line">reslut = result.tolist()</span><br><span class="line">result = reslut[<span class="number">0</span>]</span><br><span class="line">print(result)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">landmark_x = []</span><br><span class="line">landmark_y = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &lt; len(result):</span><br><span class="line">    landmark_x.append(result[count])</span><br><span class="line">    landmark_y.append(result[count+<span class="number">1</span>])</span><br><span class="line">    count += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">plt.figure(<span class="string">"Image"</span>)  <span class="comment"># 图像窗口名称</span></span><br><span class="line">plt.imshow(img)</span><br><span class="line">plt.plot(landmark_x, landmark_y, <span class="string">'ro'</span>, label=<span class="string">"point"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><blockquote><p>其实上面的操作很简单。就是通过保存模型，使用name来获得相关的属性就好了（其中，除了真值外的placeholder都要喂相应的数据，我就是因为忘记喂”keep_prob:0”所以一直没成功）。本文参考<a href="https://blog.csdn.net/u010159842/article/details/74130547" target="_blank" rel="noopener">Tensorflow实现卷积神经网络，用于人脸关键点识别</a>进行了相应的修改，有些修改是没有必要的，有些却是不可少的。并且实际测试，该网络训练后的效果并没有源博客说的那么好，它效果好只是体现在测试集上会有不错的效果，实际上如果用自己制作的样本进行测试效果很差。</p></blockquote><h2 id="img-from-csv-py（将csv的图片读取出来并进行保存）"><a href="#img-from-csv-py（将csv的图片读取出来并进行保存）" class="headerlink" title="img_from_csv.py（将csv的图片读取出来并进行保存）"></a>img_from_csv.py（将csv的图片读取出来并进行保存）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span>  numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">TRAIN_FILE = <span class="string">'training.csv'</span></span><br><span class="line">TEST_FILE = <span class="string">'test.csv'</span></span><br><span class="line"><span class="comment">#数据导入处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_data</span><span class="params">(test=False)</span>:</span></span><br><span class="line">    file_name = TEST_FILE <span class="keyword">if</span> test  <span class="keyword">else</span> TRAIN_FILE</span><br><span class="line">    df = pd.read_csv(file_name)</span><br><span class="line">    cols = df.columns[:<span class="number">-1</span>]<span class="comment">#载入列数据（不包括最后一列）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#dropna()是丢弃有缺失数据的样本</span></span><br><span class="line">    df = df.dropna()</span><br><span class="line">    df[<span class="string">'Image'</span>] = df[<span class="string">'Image'</span>].apply(<span class="keyword">lambda</span> img:np.fromstring(img,sep=<span class="string">' '</span>)/<span class="number">255.0</span>)<span class="comment">#载入图片数据，lambda代表的就是df['Image']</span></span><br><span class="line"></span><br><span class="line">    X = np.vstack(df[<span class="string">'Image'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> test:</span><br><span class="line">        y = <span class="keyword">None</span></span><br><span class="line">        <span class="comment">#提取csv中的图片进行保存</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> count &lt; <span class="number">10</span>:<span class="comment">#len(X):</span></span><br><span class="line">            S = (X[count].reshape((<span class="number">96</span>,<span class="number">96</span>))*<span class="number">255.0</span>)</span><br><span class="line">            S = S.astype(np.int32)</span><br><span class="line">            file_path_name = <span class="string">"test_images/predict"</span>+str(count)+<span class="string">".jpg"</span></span><br><span class="line">            plt.imsave(file_path_name,S, cmap = plt.gray())<span class="comment">#如果不使用cmap = plt.gray()的话，保存的图片为黄绿色，百度多次没找到原因，参考matplotlib的api得知需要如此操作</span></span><br><span class="line">            count = count+<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y = df[cols].values / <span class="number">96.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> X,y</span><br><span class="line"></span><br><span class="line">input_data(<span class="string">'test.csv'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 在这次学习的过程中遇到的最大的问题就是如何使用保存好的模型进行预测，在这里贴一下代码，其实一目了然。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;model-py&quot;&gt;&lt;a href=&quot;#model-py&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="图像处理" scheme="http://yoursite.com/categories/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="tensorflow" scheme="http://yoursite.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>214前夕，有人叫我“爸爸”</title>
    <link href="http://yoursite.com/2018/03/21/214%E5%89%8D%E5%A4%95%EF%BC%8C%E6%9C%89%E4%BA%BA%E5%8F%AB%E6%88%91%E2%80%9C%E7%88%B8%E7%88%B8%E2%80%9D/"/>
    <id>http://yoursite.com/2018/03/21/214前夕，有人叫我“爸爸”/</id>
    <published>2018-03-21T13:26:49.000Z</published>
    <updated>2018-03-22T01:34:36.154Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/huipaijianzhu.jpg" alt="huipaijianzhu"></p><p>&emsp;&emsp;2月14号是西方的情人节，虽然在农历上是忌婚娶，但在这之前于良辰吉日完婚并且愉快的一起渡过情人节也是件美事。<br>&emsp;&emsp;大我三岁的表哥便在这时举行了婚礼，在偏远的小山村，按照当地的习俗张罗开了婚礼的酒席。我从小便与表哥玩耍，自然不会错过。<br>&emsp;&emsp;去往他老家的山路以前蜿蜒崎岖，然而在国家新农村的建设下，水泥马路依旧做到了村村通。一路丛峦叠嶂，感受着风，看着碧色的竹浪在远处翻滚，有一种宁静远离了城市的喧嚣。<br>&emsp;&emsp;用过午饭，与此地并不熟络的我，只能看着表哥的亲戚邻里在一片喜庆中忙碌。对面的青山脚上盘着水泥路，如同即将将整个身子都探入幽谷的白蛇。带上小表弟和小表妹一起去那逛逛，顺便联络联络感情吧，我心想。我和表哥表弟以及表妹都来自不同的家庭，虽然家庭情况各不相同，比如表妹家就十分的富裕，但我们拥有同一个外公外婆。现如今我们很少有见面的机会，所以过年这种时候怎么能够浪费呢。和表哥确保计划可行后，大概同样没有事干的表弟表妹便欣然同意这个提议。<br>&emsp;&emsp;那段水泥路驳接于村间的公路，开始于高速公路的高架桥之下，一直都是上坡。显然它是之前修建高速公路的时被顺便修好的，然而水泥部分不长，不多久便只有泥路继续。前方的泥路处于一座被挖掘机生生劈开的小山峰之间，我不得不再次电话确定前路的可行性。再被告知有人都骑车上去后，我们继续前行。<br>&emsp;&emsp;过了小山峰，前方的路依旧宽敞，只是山壁之上清晰可见的挖掘机的爪印显示这条路的修建时间并不长。山风渐息，头上太阳高照，一直都在爬坡的我们也只能宽解了几件衣服。一路姿态各异的马尾松不少，只是其并不紧密的枝叶并不能提供多少树荫。我们许久未见，气氛确是很好，聊着这一年发生的事情甚是愉悦，倒也不觉得爬山有多累。<br>随着我们的前进，风几乎停止了，山路的一边便是有好几百米的陡坡，长着郁郁葱葱的树木，不见其底。一路欣赏着高大的马尾松，不久似乎有水声从前方传来，这给了我们更多的动力继续下去。水声渐近，拐过一个山脚，有一银河挂于山间，虽没有落九天的气势，落差却也极大，白色的水花飞溅于青石之上，奔腾地落入深谷之中，使人不禁也想与它走入谷底一探究竟。<br>&emsp;&emsp;之后的路平坦了起来，拐过一个弯，忽然又有水泥小路斜插到山路中，其蜿蜒而上，有一座白墙黑瓦的老式房子，素丽端庄，宛如一位婉约的女子在凝望着远方的来客。它占地面积很大，江西的这种典型的老建筑很容易就能满足四世同堂的需求。倘若它不是出现在这偏僻的山间，说它是豪宅也不过分。只是我们短暂的旅途怕是要在此终止了，因为前方有木栏钉在刚好伫立于路边的两个松树上，拦住了去路。<br>我决定返回了，不过在此之前，我发现水泥路那儿有溪水流出，便决定去洗把脸。忽然，从房子那端传来孩童急切的呼唤，如雏鸟看见归巢的母亲那般心急而又殷切唤着，不肯停止。我并没有管它，只是想着如何安全的靠近小溪，直到我表弟表妹的笑声也忽然在我身边绽开。<br>&emsp;&emsp;“喂，哥，那个小孩叫你爸爸。”表妹的声音传来，我这才知道发生了什么。<br>&emsp;&emsp;“那是别人，你爸还没回来。”远处传来大人的喊声。<br>&emsp;&emsp;小孩的呼唤声乍然停止，只有间断的哭声传来，依旧是低语着那声“爸爸”，这个不知道已经呼唤了多少次的字眼。<br>&emsp;&emsp;我突然不想看向小孩的方向，我眼角的余光之前就注意到了那个不断奔向木栏的小身影，他也许也有着一张红扑扑的小脸吧。<br>&emsp;&emsp;表弟表妹的笑声依旧在继续，我只想赶紧离开，并不是因为尴尬，只是后悔，为什么我要来打破孩子平静的生活。我想立马带着他俩离开，我不想他俩的笑声让本来就伤心的孩子产生任何误会，虽然他们只是在笑我，没有任何恶意。<br>&emsp;&emsp;“喂，哥，他还在看着你啊。你还真是好笑，快情人节了，女朋友没有一个，却突然当了别人的爸爸”。表妹依旧笑着对我说。<br>&emsp;&emsp;我当然能够感觉到背后那一直凝视着我的目光，所以我更加不敢回头。因为我这个莫名的来客使一个盼着想要见到爸爸的孩子伤心难过，这种愧疚让我害怕看见孩子的眼神，孩子单纯的眼神又能充斥着什么呢？<br>&emsp;&emsp;“哈哈，看你的身形也的确可以做爸爸了……”表妹的取笑仍在继续。<br>&emsp;&emsp;“为什么他们不搬出去住呢？”我希望能把他们引入另一个思考层次。<br>&emsp;&emsp;“因为没钱呗。”表弟理所当然的答道。<br>&emsp;&emsp;是啊，我当然知道这是一个原因，这还是最近修高速顺便拓宽了山路，难以想象之前他们是怎么出行的，特别是对于一个孩子，在这不小心走错就是百丈深渊的漫长山路上。那木栏围的也许不是我们，而是他吧。<br>&emsp;&emsp;刚刚的那栋屋子洁白的墙壁一尘不染，我能够感受到当初建这栋房子是多么的用心。建在这种山疙瘩里，也许在靠山吃山的年代是一种正确的选择，只是现如今，我们眼中的优雅风景毫无疑问成了一种落后，我们用于锻炼身体的山路会是造成多少麻烦的困境。<br>&emsp;&emsp;活在物质丰富生活中的我理所应当的认为大家的生活应当都如此，因为我只是一般家境，眼看着的大概也只有更富裕的生活。只是没想到只出现在新闻中的情形会出现在我的眼中，在我伤了一个孩子心之后。<br>&emsp;&emsp;“你们有听到摩托轰隆声吗？”也许孩子的家长正在骑车赶回来的路上，马上他们就能见面了。<br>&emsp;&emsp;“哥，不是哦，是刚刚的小瀑布的声音……”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/huipaijianzhu.jpg&quot; alt=&quot;huipaijianzhu&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;2月14号是西方的情人节，虽然在农历上是忌婚娶，但在这之前于良辰吉日完婚并且愉快的一起渡过情人节也是件美事。&lt;br&gt;&amp;emsp
      
    
    </summary>
    
    
      <category term="杂文" scheme="http://yoursite.com/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>hexo配置mathjax</title>
    <link href="http://yoursite.com/2018/03/21/hexo%E9%85%8D%E7%BD%AEmathjax/"/>
    <id>http://yoursite.com/2018/03/21/hexo配置mathjax/</id>
    <published>2018-03-21T12:24:34.000Z</published>
    <updated>2018-03-22T01:34:59.141Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在配置整个hexo博客的过程中，花费时间最多的就是为它添加公式支持的功能，试了很多方法，插件也是添了又删，最后在github上发现了这个，就是这么简洁，才开始用，不知道有何缺陷，但真是太感谢了。<a href="https://github.com/phoenixcw/hexo-renderer-mathjax" target="_blank" rel="noopener">hexo-renderer-mathjax的github</a></p></blockquote><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-mathjax --save</span><br><span class="line">Edit `_config.yml`:</span><br><span class="line"></span><br><span class="line">plugins:</span><br><span class="line">- hexo-renderer-mathjax</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在配置整个hexo博客的过程中，花费时间最多的就是为它添加公式支持的功能，试了很多方法，插件也是添了又删，最后在github上发现了这个，就是这么简洁，才开始用，不知道有何缺陷，但真是太感谢了。&lt;a href=&quot;https://github.com
      
    
    </summary>
    
    
      <category term="随记" scheme="http://yoursite.com/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>记忆里的秘密花园</title>
    <link href="http://yoursite.com/2018/03/21/%E8%AE%B0%E5%BF%86%E9%87%8C%E7%9A%84%E7%A7%98%E5%AF%86%E8%8A%B1%E5%9B%AD/"/>
    <id>http://yoursite.com/2018/03/21/记忆里的秘密花园/</id>
    <published>2018-03-21T02:56:16.000Z</published>
    <updated>2018-03-22T01:35:29.188Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/huayuan.jpg" alt="huayuan"></p><p>&emsp;&emsp;林枫看着同桌齐曼渐渐远离教室的背影，黑发静静地贴在她的背上，没有带走一丝微风。</p><p>&emsp;&emsp;齐曼的离开没有对节奏紧张的高中课堂带来任何停顿的契机，即使她没有做任何报告，甚至没有发出任何声音就这么走了出去，在连过道都拥挤的高中教室，她如独行侠般悠然。</p><p>&emsp;&emsp;“就像幽灵一样啊。”林枫很是无奈地想到。齐曼经常性地会这么做，对于齐曼的行为，老师为何会这么容忍，林枫一点也不觉得奇怪，毕竟是女生，总是会有一些不方便的地方吧。而且，即使齐曼大多时候出去一次就会有二十分钟甚至更久，她依然是很多人心中的优等生，也许不顶尖，但很多时候这就够了。</p><p>&emsp;&emsp;也许那里又有她静静地坐着吧。知道齐曼在干嘛的大概只有林枫。那是一个偶然，只是有时林枫都怀疑，这个偶然的美会让他一生都无法忘记。</p><p>&emsp;&emsp;思绪来到了一个繁华的夏天，自习课上，林枫又一次看着旁边空着的位置，嘟嚷着做女生真好，如此任性都一点没问题。然后仿佛被传染了一样，林枫溜出了教室，从洗手间再出来时，林枫看着头顶的烈日，紧皱的眉头上是没有抹干净的水珠。大概是估摸着也快下课了，他很是干脆地走向了小卖铺。</p><p> &emsp;&emsp;之后左手拿着一瓶水，右手拿着冒着寒气冰棒的林枫出现在了学校唯一的古风建筑“临江阁”。为什么来这？也许只是因为看到了在一片繁茂的绿叶中冒出来的朱红色檐角以及那丛惬意的树荫吧。<br>临江阁其实是学校的图书馆，只有四层，据说有三百多年的历史，经过了多次整改和维修，现在的管理者自然是学校。学校的初衷是好的，毕竟这里历史悠久，大概能感受到先贤的文化底蕴，也是真的能够观临到波光粼粼的江面，是个很完美的地方，适合指点江山，挥斥方遒。只是，对于中国的高中生，图书馆的象征意义远大于其实际的存在价值。很多学生都是刚入学的时候将其当作风景名胜看完后，再没什么稀奇地方之后便少有人来到这了。</p><p>&emsp;&emsp;走过临江阁的大门，林枫直接来到了它的背面。那里有一片枫树，茂密的枝叶只将细碎的阳光落在红色的栏杆以及齐曼的身上。她穿着一身洁白的就那么坐在栏杆上，仰着脸，双眼闭着，长长的睫毛微微地翘起，活波的光斑就落在那，还有那修长秀气的鼻子上。枫叶沙沙的响着，齐曼长长的头发在风中抬起了头。齐曼就静静地在那坐着，来人没有让她产生丝毫困扰，直到…….</p><p>&emsp;&emsp; “齐曼，你怎么在这里！”看呆了会的林枫破坏了这幅画面。</p><p>&emsp;&emsp;齐曼缓缓地张开双眼，就这样在栏杆上伸了个懒腰，扭过头看着林枫，戏谑道：“你不是也在吗？”</p><p>&emsp;&emsp; “呃，”林枫挠了挠头，装做爽朗地笑道：“嗯，我当然是出来爽爽的，教室太闷太热了。”</p><p>&emsp;&emsp; 他摇了摇双手，说道：“看，装备齐全，要水么，冰的，我还没喝哦。”</p><p> &emsp;&emsp;齐曼眼睛不眨地盯了林枫半天，然后说道：“好，给我。”然后也没等林枫伸手就将水夺了过去。</p><p>&emsp;&emsp;林枫微微一笑，翻上栏杆，就这么坐在齐曼身旁，也不太近，也不太远，就像在教室坐着那样。他并没有再说话，齐曼喝了口水之后就这么在树荫下看着，目光仿佛要穿过枫树后的围墙，到达那片波光粼粼的所在。</p><p>&emsp;&emsp;他并未像所想的那样一直坐到下一次的上课铃响。盛夏的天气就是如此，一阵风夹杂着被强行吹下的树叶奔向他们，刚刚还是阳光明媚的灿烂突然乌云密布。也许就两个人在大风起兮的氛围下等雨的到来是一种浪漫，只是一道划破天际的刺眼雷光决定着他们必须回到教室了。</p><p>&emsp;&emsp;这次偶然转角遇见的美，在充分展示过它的娇俏之外便匆匆落幕了。林枫忘记了他俩是冲回教室的还是一起慢悠悠地走回教室的，那份美因为它的突然完全占据了他的记忆。他知道他有齐曼当同桌是一件班上所有男生都羡慕的事情，即使齐曼是一个比较不爱说话的女生。</p><p>&emsp;&emsp;林枫所被占据的只是那个时候那个地点的那个人而已，他就是这么说服着自己。他看向齐曼的眼光也丝毫没有躲闪，甚至更为的磊落，对的就这样光明正大一点，他这么暗示着。</p><p>&emsp;&emsp; 回忆就此散去，林枫并没有去打扰齐曼，只是体育课偶尔提前结束后他会走到临江阁的背面，依然一转角就能看到她。齐曼不太喜欢体育，即使她跑起步来也很拼命，所以林枫知道她会躲在这里。有时他会带上一瓶水，有时什么也不带，就带着一身汗，在离齐曼稍远的地方吹吹风。</p><p>&emsp;&emsp;有时他俩什么话也不说，就这么看看光斑，看着慢慢变成金黄的枫树，或者只是摸摸栏杆，感觉着知了在秋天的到来下渐渐失去了踪迹。当然，有时他俩也说笑着。作为同桌，他知道其实齐曼只是不喜欢说话，但是你主动开口后，意外的会发现她是一个说话很有趣的女生，当然更多时候是吐槽系的恶趣味。林枫绝对不会承认这时候的她很有意思。</p><p>&emsp;&emsp; 不记得哪天，齐曼看着不再发着强光却红彤彤的夕阳，双唇轻启，像是回忆又像是呓语一般说道：“你知道我，为什么喜欢来这里坐么？”</p><p>&emsp;&emsp;林枫没有回答，齐曼也是不管不顾地就说了下去，清柔的声音在风中激不起一丝涟漪，“我的爸爸其实是老师，那时候他就在这里教书。那时候我还小，其他的老师又恰好没有同龄的小孩，他就叫我去和他的学生玩，也就是那些大哥哥大姐姐。”</p><p>&emsp;&emsp;齐曼稍稍停顿了下，眯起了双眼，仿佛被这微弱的夕阳光芒刺到了双眼，“那时候我就听爸爸的话去找他们，希望，带着我一起，一开始还好，只是后来就烦了吧。我在后面追，喊着‘哥哥姐姐’，只是一下他们就没影了。那个时候我摔倒了，裤子破了一个大洞，我怕回家被骂，所以我就躲到这里来，等眼睛不再流泪了才回去。”</p><p>&emsp;&emsp;“所以呢，现在我有了朋友，嗯，好像比一般人少了点，但是也足够了。但是只要我一有些不开心，我就来这里躲躲，心情好了在回去，这样做什么事效率才都会快啊。”说到这里，齐曼转过头向林枫笑着，那干净的脸庞在夕阳的斜射下微红，光仿佛在这时候也着了迷。</p><p>&emsp;&emsp;林枫就这么静静地听完，他将视线从齐曼的脸上扭开，也是看向那即将燃烧殆尽的夕阳，微眯的双眼似乎要在上面寻找着什么。齐曼从栏杆上跳下，林枫没有跟上去，就这么看着夕阳下齐曼离开，在他的实现内模糊起来。</p><p>&emsp;&emsp;有时候事情总是会脱离控制，尽管林枫并非没事就凑到齐曼的身旁，只是当两人有一次在暮色中从临江阁的背面出来时被同学看到后事情就脱离了控制。班上本就存在的流言蜚语传得有声有色，林枫对此只是无奈地笑笑便再也没管。毕竟他清楚大家都没有什么恶意，甚至可以说读了这么多年书谁没有被传个绯闻之类的。不过即使如此，他还是收敛了些，没有再去打扰女孩的秘密花园，作为同桌也是规规矩矩的。</p><p>&emsp;&emsp;但有一点他没有预测到，或者是从一开始就忽视了，齐曼并不是一般的女孩。在一次闲聊中，他俩的“暧昧”又被人说起时，一直默不作声的齐曼直接将桌子搬离了林枫的旁边，在一个小角落就这么孤零零地落下，之后她才悠悠然地走向老师的办公室，做着不慌不忙的补救。</p><p>&emsp;&emsp;齐曼之后并没有在角落坐下，老师调整了位置，她和一个学霸女坐在了一起，而林枫的身旁也换成了一个学霸男。天知道老师是怎么知道这对原本是同桌的学霸男和学霸女在谈着人生理想，也许是早就发现了，直到现在才找到借口吧。</p><p>&emsp;&emsp;于是林枫之后就更没有再去打扰齐曼的小世界了，只是在她不在的时候，他会到那边去看看日出日落，抚摸着那看着如干裂的圆木实际是石头做的栏杆，感受着上面传来微凉的触感，听着风吹过身姿婆娑的枫树。</p><p>&emsp;&emsp;时间过得飞快，特别是对于高中的他们来说，转眼间高中的最后一个冬天迎来了它的第一场大雪。</p><p>&emsp;&emsp;雪下得很大，在同学们惊喜的叫声中鹅毛般的雪花飘飘渺渺地落下，只是一下午的时间世界便已经银装素裹了。</p><p>&emsp;&emsp;放学的时候，林枫撑起伞正准备回家，身后的女生在说着圣诞节要怎么过之类的，林枫突然一愣，转身走向她们，问道：“你们知不知道齐曼在哪啊？”</p><p>&emsp;&emsp;“不太清楚啊，她一下课就不见人了。怎么，林枫，你有啥念想啊？”</p><p>&emsp;&emsp;“呃，没有，别瞎说。”</p><p>&emsp;&emsp;“哈哈，你还害羞啊，我可没见你在咱们齐曼面前有一点羞涩啊。”</p><p>&emsp;&emsp;林枫赶紧离开了这些正在叽叽喳喳的女生，踩着咯吱作响的雪花走向被雪裹得白里透红的临江阁。来到背后那熟悉的地方，齐曼果然如林枫所想在那里。</p><p>&emsp;&emsp;此时栏杆上满是积雪，她就静静的靠在那，身穿黄色连帽羽绒服，下面则是穿着青灰色的牛仔裤以及白色的长筒棉鞋，在白色的世界里特别明显。</p><p>&emsp;&emsp;齐曼看着林枫的到来，双手捂住脸哈了口气，可爱的样子像极了一只小浣熊。</p><p>&emsp;&emsp;“怎么了，好好的生日不过来这里吹冷风，你是个笨蛋吗？”林枫亦步亦趋地走来，一脸没好气地说道。</p><p>&emsp;&emsp;“你怎么知道我生日的，好像班上就少数几个人知道，但是里面并没有你啊。”齐曼捂着嘴巴说道，声音穿过她葱白的手指，空灵地响在飘飘洒洒的雪花中。</p><p>&emsp;&emsp;“当然是做你同桌的时候你填信息的时候看到了啊，就差圣诞节一天，我的前任好同桌，这要是记不到就奇怪了。”林枫有些无奈道，</p><p>&emsp;&emsp;“嗯，也没什么，其实我也只是来这看看这些枫树，冬天了，它们也变得光秃秃的了。那，那么，你又是来这干嘛的呢？”齐曼双眼有些闪烁，于是她把目光转向那些枫树，在雪中，光秃秃的枝桠在勾勒着一幅中国画。</p><p>&emsp;&emsp;“当然是来看你啦，好好的生日不就应该和大家一起吗？”林枫撇撇嘴，脸上的红晕大概是被有些凛冽的寒风吹的吧。</p><p>&emsp;&emsp;齐曼仿佛陷入了深思，她看着地面，用靴子画着雪，过会突然抬起了头，笑了起来，灿烂的如白雪中的一把火焰。</p><p>&emsp;&emsp;“其实我啊，以前也许你没注意，我啊，一过生日就会被爸爸接回去和妈妈一起过。不过今年是最后一年高中，所以他们只是打了电话，叫我好好的照顾自己，说是别影响了学习。其实家里应该也是有些急事吧。”齐曼顿了顿，继续看着画着雪的脚，轻声说道：“所以呢，我的朋友基本上都没有和我一起过过生日呢。她们也习惯了，倒是我有参加过她们的呢。”</p><p>&emsp;&emsp;林枫看着眼前的少女，忽然将伞塞给她，然后用手理了理头发，笑着对有些惊讶地抬起头的齐曼说：“那我算是你的朋友么？”</p><p>&emsp;&emsp;齐曼转了转伞，然后走了过去，将伞撑在两人的头上，用轻柔但很是肯定的语气回答：“不然你敢不把我当朋友么？”</p><p>&emsp;&emsp;林枫“哈哈”地笑了下，说道：“行，那跟我走。”说着也不管齐曼怪异的脸色，直接将伞收了起来，拉着她往临江阁也就是图书馆的大门走去。</p><p>&emsp;&emsp;等齐曼到了临江阁的顶楼的观景台时，尽管有着寒冷的冬风，但她还是因为眼前的美而说不出话来。</p><p>&emsp;&emsp;她从来没有这么完整的看过这片风景，整个天地一片空冥，以前只能看到一些的江面失去了那些闪耀的粼光，一片片的雪花飘扬在江面的上空构成了暮色。她的双眼无法穿透那些飞舞在空中的精灵，但却深深的感受到这江水的静谧，即使在这白雪皑皑的世界也是独一无二的美玉。而那些在江边洁白中又泛着青的树林，更是一片黛玉，弯弯曲曲的随着江流走向暮色的尽头。近处青色炊烟袅袅，如同雪之精灵的篝火，在风中摇曳生姿。</p><p>&emsp;&emsp;“为什么你会知道上来呢，不是在很久以前学校就把通向顶层的楼梯撤了吗？”良久，齐曼如是问道。</p><p>&emsp;&emsp;林枫嘴角微微勾起，说道：“其实和你一样，我小时候也一直在这里玩哦。”</p><p>&emsp;&emsp;看着齐曼有些惊讶的表情，林枫难免的有些得意了起来，继续说了下去：“不过我和你不同，我妈妈以前是这里的图书馆管理员，所以小时候我没事就赖到这边来，这栋楼我也是摸遍了，即使是上顶楼有一个偏僻的小门我也是知道的呦。”说到这里林枫有些玩味。</p><p>&emsp;&emsp;“也许你小时候在这里哭我也有看到哦，你以前和我一说我就觉得印象中好像是有这么一个女孩子，虽然有可能是错觉，但我小时候见过你绝对是真的，毕竟就这么大的地方啊。其实啊，我早就想带你上来看看，不过一直没找到机会。”</p><p>&emsp;&emsp;“那么，生日快乐！美女！”林枫用自己尽可能温暖的微笑说出了这句话。</p><p>&emsp;&emsp;“那么，你要怎么做呢，你不会觉得让我看看这风景就是生日礼物吧。”齐曼用手指勾了勾被风吹到额头上的秀发，嘴角有些坏坏的勾了起来。</p><p>&emsp;&emsp;林枫呆了呆，困扰地扫了扫头上的积雪。“嗯……我想到了！”林枫站的远了些，然后掏出手机，对正站在观景台栏杆边上的齐曼说：“笑一个，茄子，茄子。”</p><p>&emsp;&emsp;齐曼很配合的捋了捋头发，然后对着林枫的手机摄像头很是灿烂的笑了起来。</p><p>&emsp;&emsp;“嗯，好，多笑笑，多笑笑，我再拍几张”林枫大声说道。</p><p>&emsp;&emsp;虽然不知道林枫要做什么，不过齐曼还是很配合的继续摆起了姿势。</p><p>&emsp;&emsp;“好了，先等我一下啊，我马上就回来，就一下啊！”说完，林枫就冲下了楼，在那扇门后消失了身影。</p><p>&emsp;&emsp;等了十多分钟后，林枫上来了，拿来了几张照片，然后大大方方的塞到她的手上，“嗯，都给你了，不用谢我了，图书馆的阿姨我认识，我找她走了走后门，现场洗了出来还没花一分钱。呐，这些都给你了。”</p><p>&emsp;&emsp;齐曼看着照片上的自己，黄色羽绒服的少女在一片雪色中笑得很开心，如雏菊的绽放，让几朵飘在镜头前的雪花失了颜色。很久没有怎么完完全全地笑了呢。</p><p>&emsp;&emsp;她把头转向林枫，在脸上抑制不住的笑容中说道：“那么，林枫同学，你这是想追我么？不行哦，我只把你当朋友耶。”</p><p>&emsp;&emsp;“才没有，你还是老样子啊，别怎么自恋好不好？”</p><p>&emsp;&emsp;无视了林枫的话，她定了定神，严肃的说道：“爸爸说，女孩子更要以学习为重呢！”说完这句话，她少有的很没放肆地大笑起来。</p><p>&emsp;&emsp;林枫看着开心的她，也一本正经的说道：“嗯，行，那我等你下次过生日！你的好人卡，我就先留着。”</p><p>&emsp;&emsp;“还好意思说下一次生日，下一次，你要是再敢拿我的照片送给我，还连一分钱都没出，看我打不死你。”</p><p>&emsp;&emsp;夜色渐渐变暗，雪花依然如夜幕中的精灵，临江阁的顶层已经没有了驻立的两人，然而他们的欢笑声依旧能穿透层层飘雪，传到这里片沉寂了很多年的观景台来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/huayuan.jpg&quot; alt=&quot;huayuan&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;林枫看着同桌齐曼渐渐远离教室的背影，黑发静静地贴在她的背上，没有带走一丝微风。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;齐曼的离开没有对节奏紧张的高中课
      
    
    </summary>
    
      <category term="杂文" scheme="http://yoursite.com/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="http://yoursite.com/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>testBlog</title>
    <link href="http://yoursite.com/2018/03/12/testBlog/"/>
    <id>http://yoursite.com/2018/03/12/testBlog/</id>
    <published>2018-03-11T16:05:04.000Z</published>
    <updated>2018-03-21T11:55:58.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostrem&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> namespce <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="latex测试"><a href="#latex测试" class="headerlink" title="latex测试"></a>latex测试</h2><p>Simple inline $a = b + c$.</p><p>$$\frac{\partial u}{\partial t}<br>= h^2 \left( \frac{\partial^2 u}{\partial x^2} +<br>\frac{\partial^2 u}{\partial y^2} +<br>\frac{\partial^2 u}{\partial z^2}\right)$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;代码测试&quot;&gt;&lt;a href=&quot;#代码测试&quot; class=&quot;headerlink&quot; title=&quot;代码测试&quot;&gt;&lt;/a&gt;代码测试&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;
      
    
    </summary>
    
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
</feed>
